/*
  		 * Will force screen readers like VoiceOver to read this as "Zoom in - button"
  		 */

/*
  	L.Handler is a base class for handler classes that are used internally to inject
  	interaction features like dragging to classes like Map and Marker.
  */

/*
   * @class Bounds
   * @aka L.Bounds
   *
   * Represents a rectangular area in pixel coordinates.
   *
   * @example
   *
   * ```js
   * var p1 = L.point(10, 10),
   * p2 = L.point(40, 60),
   * bounds = L.bounds(p1, p2);
   * ```
   *
   * All Leaflet methods that accept `Bounds` objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:
   *
   * ```js
   * otherBounds.intersects([[10, 10], [40, 60]]);
   * ```
   *
   * Note that `Bounds` does not inherit from Leaflet's `Class` object,
   * which means new classes can't inherit from it, and new methods
   * can't be added to it with the `include` function.
   */

/*
   * @class Canvas
   * @inherits Renderer
   * @aka L.Canvas
   *
   * Allows vector layers to be displayed with [`<canvas>`](https://developer.mozilla.org/docs/Web/API/Canvas_API).
   * Inherits `Renderer`.
   *
   * Due to [technical limitations](https://caniuse.com/canvas), Canvas is not
   * available in all web browsers, notably IE8, and overlapping geometries might
   * not display properly in some edge cases.
   *
   * @example
   *
   * Use Canvas by default for all paths in the map:
   *
   * ```js
   * var map = L.map('map', {
   * 	renderer: L.canvas()
   * });
   * ```
   *
   * Use a Canvas renderer with extra padding for specific vector geometries:
   *
   * ```js
   * var map = L.map('map');
   * var myRenderer = L.canvas({ padding: 0.5 });
   * var line = L.polyline( coordinates, { renderer: myRenderer } );
   * var circle = L.circle( center, { renderer: myRenderer } );
   * ```
   */

/*
   * @class Circle
   * @aka L.Circle
   * @inherits CircleMarker
   *
   * A class for drawing circle overlays on a map. Extends `CircleMarker`.
   *
   * It's an approximation and starts to diverge from a real circle closer to poles (due to projection distortion).
   *
   * @example
   *
   * ```js
   * L.circle([50.5, 30.5], {radius: 200}).addTo(map);
   * ```
   */

/*
   * @class CircleMarker
   * @aka L.CircleMarker
   * @inherits Path
   *
   * A circle of a fixed size with radius specified in pixels. Extends `Path`.
   */

/*
   * @class Control
   * @aka L.Control
   * @inherits Class
   *
   * L.Control is a base class for implementing map controls. Handles positioning.
   * All other controls extend from this class.
   */

/*
   * @class Control.Layers
   * @aka L.Control.Layers
   * @inherits Control
   *
   * The layers control gives users the ability to switch between different base layers and switch overlays on/off (check out the [detailed example](https://leafletjs.com/examples/layers-control/)). Extends `Control`.
   *
   * @example
   *
   * ```js
   * var baseLayers = {
   * 	"Mapbox": mapbox,
   * 	"OpenStreetMap": osm
   * };
   *
   * var overlays = {
   * 	"Marker": marker,
   * 	"Roads": roadsLayer
   * };
   *
   * L.control.layers(baseLayers, overlays).addTo(map);
   * ```
   *
   * The `baseLayers` and `overlays` parameters are object literals with layer names as keys and `Layer` objects as values:
   *
   * ```js
   * {
   *     "<someName1>": layer1,
   *     "<someName2>": layer2
   * }
   * ```
   *
   * The layer names can contain HTML, which allows you to add additional styling to the items:
   *
   * ```js
   * {"<img src='my-layer-icon' /> <span class='my-layer-item'>My Layer</span>": myLayer}
   * ```
   */

/*
   * @class Control.Scale
   * @aka L.Control.Scale
   * @inherits Control
   *
   * A simple scale control that shows the scale of the current center of screen in metric (m/km) and imperial (mi/ft) systems. Extends `Control`.
   *
   * @example
   *
   * ```js
   * L.control.scale().addTo(map);
   * ```
   */

/*
   * @class DivIcon
   * @aka L.DivIcon
   * @inherits Icon
   *
   * Represents a lightweight icon for markers that uses a simple `<div>`
   * element instead of an image. Inherits from `Icon` but ignores the `iconUrl` and shadow options.
   *
   * @example
   * ```js
   * var myIcon = L.divIcon({className: 'my-div-icon'});
   * // you can set .my-div-icon styles in CSS
   *
   * L.marker([50.505, 30.57], {icon: myIcon}).addTo(map);
   * ```
   *
   * By default, it has a 'leaflet-div-icon' CSS class and is styled as a little white square with a shadow.
   */

/*
   * @class DivOverlay
   * @inherits Interactive layer
   * @aka L.DivOverlay
   * Base model for L.Popup and L.Tooltip. Inherit from it for custom overlays like plugins.
   */

/*
   * @class Draggable
   * @aka L.Draggable
   * @inherits Evented
   *
   * A class for making DOM elements draggable (including touch support).
   * Used internally for map and marker dragging. Only works for elements
   * that were positioned with [`L.DomUtil.setPosition`](#domutil-setposition).
   *
   * @example
   * ```js
   * var draggable = new L.Draggable(elementToDrag);
   * draggable.enable();
   * ```
   */

/*
   * @class Evented
   * @aka L.Evented
   * @inherits Class
   *
   * A set of methods shared between event-powered classes (like `Map` and `Marker`). Generally, events allow you to execute some function when something happens with an object (e.g. the user clicks on the map, causing the map to fire `'click'` event).
   *
   * @example
   *
   * ```js
   * map.on('click', function(e) {
   * 	alert(e.latlng);
   * } );
   * ```
   *
   * Leaflet deals with event listeners by reference, so if you want to add a listener and then remove it, define it as a function:
   *
   * ```js
   * function onClick(e) { ... }
   *
   * map.on('click', onClick);
   * map.off('click', onClick);
   * ```
   */

/*
   * @class GeoJSON
   * @aka L.GeoJSON
   * @inherits FeatureGroup
   *
   * Represents a GeoJSON object or an array of GeoJSON objects. Allows you to parse
   * GeoJSON data and display it on the map. Extends `FeatureGroup`.
   *
   * @example
   *
   * ```js
   * L.geoJSON(data, {
   * 	style: function (feature) {
   * 		return {color: feature.properties.color};
   * 	}
   * }).bindPopup(function (layer) {
   * 	return layer.feature.properties.description;
   * }).addTo(map);
   * ```
   */

/*
   * @class GridLayer
   * @inherits Layer
   * @aka L.GridLayer
   *
   * Generic class for handling a tiled grid of HTML elements. This is the base class for all tile layers and replaces `TileLayer.Canvas`.
   * GridLayer can be extended to create a tiled grid of HTML elements like `<canvas>`, `<img>` or `<div>`. GridLayer will handle creating and animating these DOM elements for you.
   *
   *
   * @section Synchronous usage
   * @example
   *
   * To create a custom layer, extend GridLayer and implement the `createTile()` method, which will be passed a `Point` object with the `x`, `y`, and `z` (zoom level) coordinates to draw your tile.
   *
   * ```js
   * var CanvasLayer = L.GridLayer.extend({
   *     createTile: function(coords){
   *         // create a <canvas> element for drawing
   *         var tile = L.DomUtil.create('canvas', 'leaflet-tile');
   *
   *         // setup tile width and height according to the options
   *         var size = this.getTileSize();
   *         tile.width = size.x;
   *         tile.height = size.y;
   *
   *         // get a canvas context and draw something on it using coords.x, coords.y and coords.z
   *         var ctx = tile.getContext('2d');
   *
   *         // return the tile so it can be rendered on screen
   *         return tile;
   *     }
   * });
   * ```
   *
   * @section Asynchronous usage
   * @example
   *
   * Tile creation can also be asynchronous, this is useful when using a third-party drawing library. Once the tile is finished drawing it can be passed to the `done()` callback.
   *
   * ```js
   * var CanvasLayer = L.GridLayer.extend({
   *     createTile: function(coords, done){
   *         var error;
   *
   *         // create a <canvas> element for drawing
   *         var tile = L.DomUtil.create('canvas', 'leaflet-tile');
   *
   *         // setup tile width and height according to the options
   *         var size = this.getTileSize();
   *         tile.width = size.x;
   *         tile.height = size.y;
   *
   *         // draw something asynchronously and pass the tile to the done() callback
   *         setTimeout(function() {
   *             done(error, tile);
   *         }, 1000);
   *
   *         return tile;
   *     }
   * });
   * ```
   *
   * @section
   */

/*
   * @class ImageOverlay
   * @aka L.ImageOverlay
   * @inherits Interactive layer
   *
   * Used to load and display a single image over specific bounds of the map. Extends `Layer`.
   *
   * @example
   *
   * ```js
   * var imageUrl = 'https://maps.lib.utexas.edu/maps/historical/newark_nj_1922.jpg',
   * 	imageBounds = [[40.712216, -74.22655], [40.773941, -74.12544]];
   * L.imageOverlay(imageUrl, imageBounds).addTo(map);
   * ```
   */

/*
   * @class LatLngBounds
   * @aka L.LatLngBounds
   *
   * Represents a rectangular geographical area on a map.
   *
   * @example
   *
   * ```js
   * var corner1 = L.latLng(40.712, -74.227),
   * corner2 = L.latLng(40.774, -74.125),
   * bounds = L.latLngBounds(corner1, corner2);
   * ```
   *
   * All Leaflet methods that accept LatLngBounds objects also accept them in a simple Array form (unless noted otherwise), so the bounds example above can be passed like this:
   *
   * ```js
   * map.fitBounds([
   * 	[40.712, -74.227],
   * 	[40.774, -74.125]
   * ]);
   * ```
   *
   * Caution: if the area crosses the antimeridian (often confused with the International Date Line), you must specify corners _outside_ the [-180, 180] degrees longitude range.
   *
   * Note that `LatLngBounds` does not inherit from Leaflet's `Class` object,
   * which means new classes can't inherit from it, and new methods
   * can't be added to it with the `include` function.
   */

/*
   * @class Layer
   * @inherits Evented
   * @aka L.Layer
   * @aka ILayer
   *
   * A set of methods from the Layer base class that all Leaflet layers use.
   * Inherits all methods, options and events from `L.Evented`.
   *
   * @example
   *
   * ```js
   * var layer = L.marker(latlng).addTo(map);
   * layer.addTo(map);
   * layer.remove();
   * ```
   *
   * @event add: Event
   * Fired after the layer is added to a map
   *
   * @event remove: Event
   * Fired after the layer is removed from a map
   */

/*
   * @class LayerGroup
   * @aka L.LayerGroup
   * @inherits Interactive layer
   *
   * Used to group several layers and handle them as one. If you add it to the map,
   * any layers added or removed from the group will be added/removed on the map as
   * well. Extends `Layer`.
   *
   * @example
   *
   * ```js
   * L.layerGroup([marker1, marker2])
   * 	.addLayer(polyline)
   * 	.addTo(map);
   * ```
   */

/*
   * @class Path
   * @aka L.Path
   * @inherits Interactive layer
   *
   * An abstract class that contains options and constants shared between vector
   * overlays (Polygon, Polyline, Circle). Do not use it directly. Extends `Layer`.
   */

/*
   * @class Point
   * @aka L.Point
   *
   * Represents a point with `x` and `y` coordinates in pixels.
   *
   * @example
   *
   * ```js
   * var point = L.point(200, 300);
   * ```
   *
   * All Leaflet methods and options that accept `Point` objects also accept them in a simple Array form (unless noted otherwise), so these lines are equivalent:
   *
   * ```js
   * map.panBy([200, 300]);
   * map.panBy(L.point(200, 300));
   * ```
   *
   * Note that `Point` does not inherit from Leaflet's `Class` object,
   * which means new classes can't inherit from it, and new methods
   * can't be added to it with the `include` function.
   */

/*
   * @class Polygon
   * @aka L.Polygon
   * @inherits Polyline
   *
   * A class for drawing polygon overlays on a map. Extends `Polyline`.
   *
   * Note that points you pass when creating a polygon shouldn't have an additional last point equal to the first one — it's better to filter out such points.
   *
   *
   * @example
   *
   * ```js
   * // create a red polygon from an array of LatLng points
   * var latlngs = [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]];
   *
   * var polygon = L.polygon(latlngs, {color: 'red'}).addTo(map);
   *
   * // zoom the map to the polygon
   * map.fitBounds(polygon.getBounds());
   * ```
   *
   * You can also pass an array of arrays of latlngs, with the first array representing the outer shape and the other arrays representing holes in the outer shape:
   *
   * ```js
   * var latlngs = [
   *   [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]], // outer ring
   *   [[37.29, -108.58],[40.71, -108.58],[40.71, -102.50],[37.29, -102.50]] // hole
   * ];
   * ```
   *
   * Additionally, you can pass a multi-dimensional array to represent a MultiPolygon shape.
   *
   * ```js
   * var latlngs = [
   *   [ // first polygon
   *     [[37, -109.05],[41, -109.03],[41, -102.05],[37, -102.04]], // outer ring
   *     [[37.29, -108.58],[40.71, -108.58],[40.71, -102.50],[37.29, -102.50]] // hole
   *   ],
   *   [ // second polygon
   *     [[41, -111.03],[45, -111.04],[45, -104.05],[41, -104.05]]
   *   ]
   * ];
   * ```
   */

/*
   * @class Polyline
   * @aka L.Polyline
   * @inherits Path
   *
   * A class for drawing polyline overlays on a map. Extends `Path`.
   *
   * @example
   *
   * ```js
   * // create a red polyline from an array of LatLng points
   * var latlngs = [
   * 	[45.51, -122.68],
   * 	[37.77, -122.43],
   * 	[34.04, -118.2]
   * ];
   *
   * var polyline = L.polyline(latlngs, {color: 'red'}).addTo(map);
   *
   * // zoom the map to the polyline
   * map.fitBounds(polyline.getBounds());
   * ```
   *
   * You can also pass a multi-dimensional array to represent a `MultiPolyline` shape:
   *
   * ```js
   * // create a red polyline from an array of arrays of LatLng points
   * var latlngs = [
   * 	[[45.51, -122.68],
   * 	 [37.77, -122.43],
   * 	 [34.04, -118.2]],
   * 	[[40.78, -73.91],
   * 	 [41.83, -87.62],
   * 	 [32.76, -96.72]]
   * ];
   * ```
   */

/*
   * @class Popup
   * @inherits DivOverlay
   * @aka L.Popup
   * Used to open popups in certain places of the map. Use [Map.openPopup](#map-openpopup) to
   * open popups while making sure that only one popup is open at one time
   * (recommended for usability), or use [Map.addLayer](#map-addlayer) to open as many as you want.
   *
   * @example
   *
   * If you want to just bind a popup to marker click and then open it, it's really easy:
   *
   * ```js
   * marker.bindPopup(popupContent).openPopup();
   * ```
   * Path overlays like polylines also have a `bindPopup` method.
   *
   * A popup can be also standalone:
   *
   * ```js
   * var popup = L.popup()
   * 	.setLatLng(latlng)
   * 	.setContent('<p>Hello world!<br />This is a nice popup.</p>')
   * 	.openOn(map);
   * ```
   * or
   * ```js
   * var popup = L.popup(latlng, {content: '<p>Hello world!<br />This is a nice popup.</p>')
   * 	.openOn(map);
   * ```
   */

/*
   * @class PosAnimation
   * @aka L.PosAnimation
   * @inherits Evented
   * Used internally for panning animations, utilizing CSS3 Transitions for modern browsers and a timer fallback for IE6-9.
   *
   * @example
   * ```js
   * var myPositionMarker = L.marker([48.864716, 2.294694]).addTo(map);
   *
   * myPositionMarker.on("click", function() {
   * 	var pos = map.latLngToLayerPoint(myPositionMarker.getLatLng());
   * 	pos.y -= 25;
   * 	var fx = new L.PosAnimation();
   *
   * 	fx.once('end',function() {
   * 		pos.y += 25;
   * 		fx.run(myPositionMarker._icon, pos, 0.8);
   * 	});
   *
   * 	fx.run(myPositionMarker._icon, pos, 0.3);
   * });
   *
   * ```
   *
   * @constructor L.PosAnimation()
   * Creates a `PosAnimation` object.
   *
   */

/*
   * @class Rectangle
   * @aka L.Rectangle
   * @inherits Polygon
   *
   * A class for drawing rectangle overlays on a map. Extends `Polygon`.
   *
   * @example
   *
   * ```js
   * // define rectangle geographical bounds
   * var bounds = [[54.559322, -5.767822], [56.1210604, -3.021240]];
   *
   * // create an orange rectangle
   * L.rectangle(bounds, {color: "#ff7800", weight: 1}).addTo(map);
   *
   * // zoom the map to the rectangle bounds
   * map.fitBounds(bounds);
   * ```
   *
   */

/*
   * @class Renderer
   * @inherits Layer
   * @aka L.Renderer
   *
   * Base class for vector renderer implementations (`SVG`, `Canvas`). Handles the
   * DOM container of the renderer, its bounds, and its zoom animation.
   *
   * A `Renderer` works as an implicit layer group for all `Path`s - the renderer
   * itself can be added or removed to the map. All paths use a renderer, which can
   * be implicit (the map will decide the type of renderer and use it automatically)
   * or explicit (using the [`renderer`](#path-renderer) option of the path).
   *
   * Do not use this class directly, use `SVG` and `Canvas` instead.
   *
   * @event update: Event
   * Fired when the renderer updates its bounds, center and zoom, for example when
   * its map has moved
   */

/*
   * @class SVG
   *
   *
   * VML was deprecated in 2012, which means VML functionality exists only for backwards compatibility
   * with old versions of Internet Explorer.
   */

/*
   * @class SVGOverlay
   * @aka L.SVGOverlay
   * @inherits ImageOverlay
   *
   * Used to load, display and provide DOM access to an SVG file over specific bounds of the map. Extends `ImageOverlay`.
   *
   * An SVG overlay uses the [`<svg>`](https://developer.mozilla.org/docs/Web/SVG/Element/svg) element.
   *
   * @example
   *
   * ```js
   * var svgElement = document.createElementNS("http://www.w3.org/2000/svg", "svg");
   * svgElement.setAttribute('xmlns', "http://www.w3.org/2000/svg");
   * svgElement.setAttribute('viewBox', "0 0 200 200");
   * svgElement.innerHTML = '<rect width="200" height="200"/><rect x="75" y="23" width="50" height="50" style="fill:red"/><rect x="75" y="123" width="50" height="50" style="fill:#0013ff"/>';
   * var svgElementBounds = [ [ 32, -130 ], [ 13, -100 ] ];
   * L.svgOverlay(svgElement, svgElementBounds).addTo(map);
   * ```
   */

/*
   * @class TileLayer
   * @inherits GridLayer
   * @aka L.TileLayer
   * Used to load and display tile layers on the map. Note that most tile servers require attribution, which you can set under `Layer`. Extends `GridLayer`.
   *
   * @example
   *
   * ```js
   * L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png?{foo}', {foo: 'bar', attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(map);
   * ```
   *
   * @section URL template
   * @example
   *
   * A string of the following form:
   *
   * ```
   * 'https://{s}.somedomain.com/blabla/{z}/{x}/{y}{r}.png'
   * ```
   *
   * `{s}` means one of the available subdomains (used sequentially to help with browser parallel requests per domain limitation; subdomain values are specified in options; `a`, `b` or `c` by default, can be omitted), `{z}` — zoom level, `{x}` and `{y}` — tile coordinates. `{r}` can be used to add "&commat;2x" to the URL to load retina tiles.
   *
   * You can use custom keys in the template, which will be [evaluated](#util-template) from TileLayer options, like this:
   *
   * ```
   * L.tileLayer('https://{s}.somedomain.com/{foo}/{z}/{x}/{y}.png', {foo: 'bar'});
   * ```
   */

/*
   * @class TileLayer.WMS
   * @inherits TileLayer
   * @aka L.TileLayer.WMS
   * Used to display [WMS](https://en.wikipedia.org/wiki/Web_Map_Service) services as tile layers on the map. Extends `TileLayer`.
   *
   * @example
   *
   * ```js
   * var nexrad = L.tileLayer.wms("http://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r.cgi", {
   * 	layers: 'nexrad-n0r-900913',
   * 	format: 'image/png',
   * 	transparent: true,
   * 	attribution: "Weather data © 2012 IEM Nexrad"
   * });
   * ```
   */

/*
   * @class Tooltip
   * @inherits DivOverlay
   * @aka L.Tooltip
   * Used to display small texts on top of map layers.
   *
   * @example
   * If you want to just bind a tooltip to marker:
   *
   * ```js
   * marker.bindTooltip("my tooltip text").openTooltip();
   * ```
   * Path overlays like polylines also have a `bindTooltip` method.
   *
   * A tooltip can be also standalone:
   *
   * ```js
   * var tooltip = L.tooltip()
   * 	.setLatLng(latlng)
   * 	.setContent('Hello world!<br />This is a nice tooltip.')
   * 	.addTo(map);
   * ```
   * or
   * ```js
   * var tooltip = L.tooltip(latlng, {content: 'Hello world!<br />This is a nice tooltip.'})
   * 	.addTo(map);
   * ```
   *
   *
   * Note about tooltip offset. Leaflet takes two options in consideration
   * for computing tooltip offsetting:
   * - the `offset` Tooltip option: it defaults to [0, 0], and it's specific to one tooltip.
   *   Add a positive x offset to move the tooltip to the right, and a positive y offset to
   *   move it to the bottom. Negatives will move to the left and top.
   * - the `tooltipAnchor` Icon option: this will only be considered for Marker. You
   *   should adapt this value if you use a custom icon.
   */

/*
   * @class Transformation
   * @aka L.Transformation
   *
   * Represents an affine transformation: a set of coefficients `a`, `b`, `c`, `d`
   * for transforming a point of a form `(x, y)` into `(a*x + b, c*y + d)` and doing
   * the reverse. Used by Leaflet in its projections code.
   *
   * @example
   *
   * ```js
   * var transformation = L.transformation(2, 5, -1, 10),
   * 	p = L.point(1, 2),
   * 	p2 = transformation.transform(p), //  L.point(7, 8)
   * 	p3 = transformation.untransform(p2); //  L.point(1, 2)
   * ```
   */

/*
   * @miniclass Icon.Default (Icon)
   * @aka L.Icon.Default
   * @section
   *
   * A trivial subclass of `Icon`, represents the icon to use in `Marker`s when
   * no icon is specified. Points to the blue marker image distributed with Leaflet
   * releases.
   *
   * In order to customize the default icon, just change the properties of `L.Icon.Default.prototype.options`
   * (which is a set of `Icon options`).
   *
   * If you want to _completely_ replace the default icon, override the
   * `L.Marker.prototype.options.icon` with your own icon instead.
   */

/*
   * @namespace Browser
   * @aka L.Browser
   *
   * A namespace with static properties for browser/feature detection used by Leaflet internally.
   *
   * @example
   *
   * ```js
   * if (L.Browser.ielt9) {
   *   alert('Upgrade your browser, dude!');
   * }
   * ```
   */

/*
   * @namespace CRS
   * @crs L.CRS.Base
   * Object that defines coordinate reference systems for projecting
   * geographical points into pixel (screen) coordinates and back (and to
   * coordinates in other units for [WMS](https://en.wikipedia.org/wiki/Web_Map_Service) services). See
   * [spatial reference system](https://en.wikipedia.org/wiki/Spatial_reference_system).
   *
   * Leaflet defines the most usual CRSs by default. If you want to use a
   * CRS not defined by default, take a look at the
   * [Proj4Leaflet](https://github.com/kartena/Proj4Leaflet) plugin.
   *
   * Note that the CRS instances do not inherit from Leaflet's `Class` object,
   * and can't be instantiated. Also, new classes can't inherit from them,
   * and methods can't be added to them with the `include` function.
   */

/*
   * @namespace CRS
   * @crs L.CRS.EPSG3857
   *
   * The most common CRS for online maps, used by almost all free and commercial
   * tile providers. Uses Spherical Mercator projection. Set in by default in
   * Map's `crs` option.
   */

/*
   * @namespace CRS
   * @crs L.CRS.Earth
   *
   * Serves as the base for CRS that are global such that they cover the earth.
   * Can only be used as the base for other CRS and cannot be used directly,
   * since it does not have a `code`, `projection` or `transformation`. `distance()` returns
   * meters.
   */

/*
   * @namespace DomEvent
   * Utility functions to work with the [DOM events](https://developer.mozilla.org/docs/Web/API/Event), used by Leaflet internally.
   */

/*
   * @namespace DomUtil
   *
   * Utility functions to work with the [DOM](https://developer.mozilla.org/docs/Web/API/Document_Object_Model)
   * tree, used by Leaflet internally.
   *
   * Most functions expecting or returning a `HTMLElement` also work for
   * SVG elements. The only difference is that classes refer to CSS classes
   * in HTML and SVG classes in SVG.
   */

/*
   * @namespace Layer
   * @section Popup methods example
   *
   * All layers share a set of methods convenient for binding popups to it.
   *
   * ```js
   * var layer = L.Polygon(latlngs).bindPopup('Hi There!').addTo(map);
   * layer.openPopup();
   * layer.closePopup();
   * ```
   *
   * Popups will also be automatically opened when the layer is clicked on and closed when the layer is removed from the map or another popup is opened.
   */

/*
   * @namespace Layer
   * @section Tooltip methods example
   *
   * All layers share a set of methods convenient for binding tooltips to it.
   *
   * ```js
   * var layer = L.Polygon(latlngs).bindTooltip('Hi There!').addTo(map);
   * layer.openTooltip();
   * layer.closeTooltip();
   * ```
   */

/*
   * @namespace LineUtil
   *
   * Various utility functions for polyline points processing, used by Leaflet internally to make polylines lightning-fast.
   */

/*
   * @namespace PolyUtil
   * Various utility functions for polygon geometries.
   */

/*
   * @namespace Projection
   * @section
   * Leaflet comes with a set of already defined Projections out of the box:
   *
   * @projection L.Projection.LonLat
   *
   * Equirectangular, or Plate Carree projection — the most simple projection,
   * mostly used by GIS enthusiasts. Directly maps `x` as longitude, and `y` as
   * latitude. Also suitable for flat worlds, e.g. game maps. Used by the
   * `EPSG:4326` and `Simple` CRS.
   */

/*
   * @namespace Util
   *
   * Various utility functions, used by Leaflet internally.
   */

/*
   * Extends L.DomEvent to provide touch support for Internet Explorer and Windows-based devices.
   */

/*
   * Extends the event handling code with double tap support for mobile browsers.
   *
   * Note: currently most browsers fire native dblclick, with only a few exceptions
   * (see https://github.com/Leaflet/Leaflet/issues/7012#issuecomment-595087386)
   */

/*
   * L.Handler.BoxZoom is used to add shift-drag zoom interaction to the map
   * (zoom to a selected bounding box), enabled by default.
   */

/*
   * L.Handler.DoubleClickZoom is used to handle double-click zoom on the map, enabled by default.
   */

/*
   * L.Handler.MapDrag is used to make the map draggable (with panning inertia), enabled by default.
   */

/*
   * L.Handler.MarkerDrag is used internally by L.Marker to make the markers draggable.
   */

/*
   * L.Handler.ScrollWheelZoom is used by L.Map to enable mouse scroll wheel zoom on the map.
   */

/*
   * L.Handler.TouchZoom is used by L.Map to add pinch zoom on supported mobile browsers.
   */

/*
   * L.Map.Keyboard is handling keyboard interaction with the map, enabled by default.
   */

/*
   * L.Map.TapHold is used to simulate `contextmenu` event on long hold,
   * which otherwise is not fired by mobile Safari.
   */

/*
   * L.Rectangle extends Polygon and creates a rectangle when passed a LatLngBounds object.
   */

/*
   * Thanks to Dmitry Baranovsky and his Raphael library for inspiration!
   */

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/* #__PURE__ */

/* . */

/* .Action.Pop */

/* .Router */

/* .Routes.AboutUs */

/* .Routes.Blog */

/* .Routes.Contacts */

/* .Routes.FAQs */

/* .Routes.Home */

/* .Routes.OurTeam */

/* .Routes.Services */

/* .Routes.Solutions */

/* .UNSAFE_DataRouterStateContext */

/* .createBrowserHistory */

/* .createPath */

/* .invariant */

/* .isRouteErrorResponse */

/* .joinPaths */

/* .matchPath */

/* .matchRoutes */

/* .parsePath */

/* .resolveTo */

/* .stripBasename */

/* .useHref */

/* .useLocation */

/* .useMatch */

/* .useNavigate */

/* .useResolvedPath */

/* @class LatLng
   * @aka L.LatLng
   *
   * Represents a geographical point with a certain latitude and longitude.
   *
   * @example
   *
   * ```
   * var latlng = L.latLng(50.5, 30.5);
   * ```
   *
   * All Leaflet methods that accept LatLng objects also accept them in a simple Array form and simple object form (unless noted otherwise), so these lines are equivalent:
   *
   * ```
   * map.panTo([50, 30]);
   * map.panTo({lon: 30, lat: 50});
   * map.panTo({lat: 50, lng: 30});
   * map.panTo(L.latLng(50, 30));
   * ```
   *
   * Note that `LatLng` does not inherit from Leaflet's `Class` object,
   * which means new classes can't inherit from it, and new methods
   * can't be added to it with the `include` function.
   */

/* @function clipPolygon(points: Point[], bounds: Bounds, round?: Boolean): Point[]
   * Clips the polygon geometry defined by the given `points` by the given bounds (using the [Sutherland-Hodgman algorithm](https://en.wikipedia.org/wiki/Sutherland%E2%80%93Hodgman_algorithm)).
   * Used by Leaflet to only show polygon points that are on the screen or near, increasing
   * performance. Note that polygon points needs different algorithm for clipping
   * than polyline, so there's a separate method for it.
   */

/* @function polygonCenter(latlngs: LatLng[] crs: CRS): LatLng
   * Returns the center ([centroid](http://en.wikipedia.org/wiki/Centroid)) of the passed LatLngs (first ring) from a polygon.
   */

/* @function polylineCenter(latlngs: LatLng[], crs: CRS): LatLng
   * Returns the center ([centroid](http://en.wikipedia.org/wiki/Centroid)) of the passed LatLngs (first ring) from a polyline.
   */

/* @method eachLayer(fn: Function, context?: Object): this
  	 * Iterates over the layers of the map, optionally specifying context of the iterator function.
  	 * ```
  	 * map.eachLayer(function(layer){
  	 *     layer.bindPopup('Hello');
  	 * });
  	 * ```
  	 */

/* @method off(type: String, fn?: Function, context?: Object): this
  	 * Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.
  	 *
  	 * @alternative
  	 * @method off(eventMap: Object): this
  	 * Removes a set of type/listener pairs.
  	 *
  	 * @alternative
  	 * @method off: this
  	 * Removes all listeners to all events on the object. This includes implicitly attached events.
  	 */

/* @method on(type: String, fn: Function, context?: Object): this
  	 * Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).
  	 *
  	 * @alternative
  	 * @method on(eventMap: Object): this
  	 * Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
  	 */

/* @namespace Map
   * @section Interaction Options
   * @option closePopupOnClick: Boolean = true
   * Set it to `false` if you don't want popups to close when user clicks the map.
   */

/* @namespace Map
   * @section Layer events
   *
   * @event layeradd: LayerEvent
   * Fired when a new layer is added to the map.
   *
   * @event layerremove: LayerEvent
   * Fired when some layer is removed from the map
   *
   * @section Methods for Layers and Controls
   */

/* @namespace Map
   * @section Methods for Layers and Controls
   */

/* @namespace Marker
   * @section Interaction handlers
   *
   * Interaction handlers are properties of a marker instance that allow you to control interaction behavior in runtime, enabling or disabling certain features such as dragging (see `Handler` methods). Example:
   *
   * ```js
   * marker.dragging.disable();
   * ```
   *
   * @property dragging: Handler
   * Marker dragging handler (by both mouse and touch). Only valid when the marker is on the map (Otherwise set [`marker.options.draggable`](#marker-draggable)).
   */

/* @preserve
 * Leaflet 1.9.2, a JS library for interactive maps. https://leafletjs.com
 * (c) 2010-2022 Vladimir Agafonkin, (c) 2010-2011 CloudMade
 */

/* @section
  	 *
  	 * In addition to [shared layer methods](#Layer) like `addTo()` and `remove()` and [popup methods](#Popup) like bindPopup() you can also use the following methods:
  	 */

/* @section
  	 * @aka GeoJSON options
  	 *
  	 * @option pointToLayer: Function = *
  	 * A `Function` defining how GeoJSON points spawn Leaflet layers. It is internally
  	 * called when data is added, passing the GeoJSON point feature and its `LatLng`.
  	 * The default is to spawn a default `Marker`:
  	 * ```js
  	 * function(geoJsonPoint, latlng) {
  	 * 	return L.marker(latlng);
  	 * }
  	 * ```
  	 *
  	 * @option style: Function = *
  	 * A `Function` defining the `Path options` for styling GeoJSON lines and polygons,
  	 * called internally when data is added.
  	 * The default value is to not override any defaults:
  	 * ```js
  	 * function (geoJsonFeature) {
  	 * 	return {}
  	 * }
  	 * ```
  	 *
  	 * @option onEachFeature: Function = *
  	 * A `Function` that will be called once for each created `Feature`, after it has
  	 * been created and styled. Useful for attaching events and popups to features.
  	 * The default is to do nothing with the newly created layers:
  	 * ```js
  	 * function (feature, layer) {}
  	 * ```
  	 *
  	 * @option filter: Function = *
  	 * A `Function` that will be used to decide whether to include a feature or not.
  	 * The default is to include all features:
  	 * ```js
  	 * function (geoJsonFeature) {
  	 * 	return true;
  	 * }
  	 * ```
  	 * Note: dynamically changing the `filter` option will have effect only on newly
  	 * added data. It will _not_ re-evaluate already included features.
  	 *
  	 * @option coordsToLatLng: Function = *
  	 * A `Function` that will be used for converting GeoJSON coordinates to `LatLng`s.
  	 * The default is the `coordsToLatLng` static method.
  	 *
  	 * @option markersInheritOptions: Boolean = false
  	 * Whether default Markers for "Point" type Features inherit from group options.
  	 */

/* @section
  	 * @aka Icon options
  	 *
  	 * @option iconUrl: String = null
  	 * **(required)** The URL to the icon image (absolute or relative to your script path).
  	 *
  	 * @option iconRetinaUrl: String = null
  	 * The URL to a retina sized version of the icon image (absolute or relative to your
  	 * script path). Used for Retina screen devices.
  	 *
  	 * @option iconSize: Point = null
  	 * Size of the icon image in pixels.
  	 *
  	 * @option iconAnchor: Point = null
  	 * The coordinates of the "tip" of the icon (relative to its top left corner). The icon
  	 * will be aligned so that this point is at the marker's geographical location. Centered
  	 * by default if size is specified, also can be set in CSS with negative margins.
  	 *
  	 * @option popupAnchor: Point = [0, 0]
  	 * The coordinates of the point from which popups will "open", relative to the icon anchor.
  	 *
  	 * @option tooltipAnchor: Point = [0, 0]
  	 * The coordinates of the point from which tooltips will "open", relative to the icon anchor.
  	 *
  	 * @option shadowUrl: String = null
  	 * The URL to the icon shadow image. If not specified, no shadow image will be created.
  	 *
  	 * @option shadowRetinaUrl: String = null
  	 *
  	 * @option shadowSize: Point = null
  	 * Size of the shadow image in pixels.
  	 *
  	 * @option shadowAnchor: Point = null
  	 * The coordinates of the "tip" of the shadow (relative to its top left corner) (the same
  	 * as iconAnchor if not specified).
  	 *
  	 * @option className: String = ''
  	 * A custom class name to assign to both icon and shadow images. Empty by default.
  	 */

/* @section
  	 * Classes extending L.Control will inherit the following methods:
  	 *
  	 * @method getPosition: string
  	 * Returns the position of the control.
  	 */

/* @section
  	 * Classes extending `L.Layer` will inherit the following methods:
  	 *
  	 * @method addTo(map: Map|LayerGroup): this
  	 * Adds the layer to the given map or layer group.
  	 */

/* @section Extension methods
   * @uninheritable
   *
   * Every control should extend from `L.Control` and (re-)implement the following methods.
   *
   * @method onAdd(map: Map): HTMLElement
   * Should return the container DOM element for the control and add listeners on relevant map events. Called on [`control.addTo(map)`](#control-addTo).
   *
   * @method onRemove(map: Map)
   * Optional method. Should contain all clean up code that removes the listeners previously added in [`onAdd`](#control-onadd). Called on [`control.remove()`](#control-remove).
   */

/* @section Extension methods
   * @uninheritable
   *
   * Every layer should extend from `L.Layer` and (re-)implement the following methods.
   *
   * @method onAdd(map: Map): this
   * Should contain code that creates DOM elements for the layer, adds them to `map panes` where they should belong and puts listeners on relevant map events. Called on [`map.addLayer(layer)`](#map-addlayer).
   *
   * @method onRemove(map: Map): this
   * Should contain all clean up code that removes the layer's elements from the DOM and removes listeners previously added in [`onAdd`](#layer-onadd). Called on [`map.removeLayer(layer)`](#map-removelayer).
   *
   * @method getEvents(): Object
   * This optional method should return an object like `{ viewreset: this._reset }` for [`addEventListener`](#evented-addeventlistener). The event handlers in this object will be automatically added and removed from the map with your layer.
   *
   * @method getAttribution(): String
   * This optional method should return a string containing HTML to be shown on the `Attribution control` whenever the layer is visible.
   *
   * @method beforeAdd(map: Map): this
   * Optional method. Called on [`map.addLayer(layer)`](#map-addlayer), before the layer is added to the map, before events are initialized, without waiting until the map is in a usable state. Use for early initialization only.
   */

/* A11y */

/* AllServicesList */

/* BENEFIT_ITEMS.map */

/* BENEFIT_ITEMS.slice */

/* BLOG_ITEMS.map */

/* BLOG_ITEMS.slice */

/* BrowserRouter */

/* Built-in method references for those with the same name as other `lodash` methods. */

/* Built-in method references that are verified to be native. */

/* Button */

/* CONTACT_ITEMS.map */

/* ContactsHelpItem */

/* ErrorBoundary */

/* FAQ_ITEMS.map */

/* FOOTER_CONTACTS.map */

/* FOOTER_LINKS.map */

/* FOOTER_SERVICES.map */

/* Footer */

/* HEADER_DROPDOWN_ITEMS.map */

/* Header */

/* Help */

/* Link */

/* MAP_MARKERS.map */

/* NAV_ITEMS.slice */

/* NavLink */

/* Navigation */

/* Node.js helper references. */

/* OurTeamSingle */

/* PRICING_ITEMS.map */

/* Provider */

/* Route */

/* Routes */

/* Routes.AboutUs */

/* Routes.Blog */

/* Routes.Contacts */

/* Routes.Elements */

/* Routes.FAQs */

/* Routes.Home */

/* Routes.OurTeam */

/* Routes.OurTeamSingle */

/* Routes.ServiceSingle */

/* Routes.Services */

/* Routes.SolutionSingle */

/* Routes.Solutions */

/* SERVICES_ITEMS.filter */

/* SERVICES_ITEMS.map */

/* SERVICE_SINLE_ITEMS.map */

/* SOCIAL_MEDIA_ICONS */

/* SOCIAL_MEDIA_ICONS.0 */

/* SOCIAL_MEDIA_ICONS.1 */

/* SOCIAL_MEDIA_ICONS.2 */

/* SOCIAL_MEDIA_ICONS.map */

/* SOLUTION_ITEMS.filter */

/* SOLUTION_ITEMS.map */

/* SOLUTION_ITEMS.slice */

/* SOLUTION_SINGLE_ITEMS.map */

/* SOLUTION_SINGLE_ITEMS.reduce */

/* STATISTIC_AMOUNT */

/* STATISTIC_AMOUNT.map */

/* STATISTIC_AMOUNT.slice */

/* STATISTIC_COMPANY_ICONS.map */

/* SWIPER_CONFIG.benefitsPoints */

/* SWIPER_CONFIG.breakPoints */

/* SWIPER_CONFIG.centeredSlidesBounds */

/* SWIPER_CONFIG.commentSliderStyles */

/* SWIPER_CONFIG.commentsPoints */

/* SWIPER_CONFIG.customersBreakPoints */

/* SWIPER_CONFIG.grabCursor */

/* SWIPER_CONFIG.modules */

/* SWIPER_CONFIG.priceSliderStyles */

/* SWIPER_CONFIG.pricingBreakPoints */

/* SWIPER_CONFIG.scrollbar */

/* SWIPER_CONFIG.setCustomNavigation */

/* SWIPER_CONFIG.spaceBetweenComment */

/* SWIPER_CONFIG.spaceBetweenZero */

/* ServiceSingleHead */

/* ServiceSingleList */

/* SocialLinks */

/* SolutionSingleHead */

/* SolutionSingleMain */

/* Subscribe */

/* Svgr */

/* TEAM_ITEMS.filter */

/* TEAM_ITEMS.map */

/* TESTIMONIAL_ITEMS.map */

/* TextInput */

/* ThemeProvider */

/* Z+1 */

/* ["default"] */

/* applyMiddleware.apply */

/* bindActionCreators */

/* binding */

/* combineReducers */

/* compose */

/* compose.apply */

/* copy array in case events are being fired */

/* createGlobalStyle */

/* createStore */

/* default */

/* default.a */

/* default.button */

/* default.defaults */

/* default.div */

/* default.extendedDefaults */

/* default.fieldset */

/* default.footer */

/* default.form */

/* default.h1 */

/* default.h2 */

/* default.h3 */

/* default.h4 */

/* default.header */

/* default.img */

/* default.input */

/* default.label */

/* default.li */

/* default.locals */

/* default.option */

/* default.p */

/* default.prototype.getBreakpoint */

/* default.section */

/* default.select */

/* default.span */

/* default.textarea */

/* default.ul */

/* default.use */

/* eslint no-param-reassign: "off" */

/* eslint no-unused-vars: "off" */

/* eslint-disable */

/* eslint-disable no-param-reassign */

/* eslint-disable no-proto */

/* eslint-disable no-underscore-dangle */

/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */

/* eslint-enable */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* harmony default export */

/* harmony export */

/* harmony import */

/* import() */

/* istanbul ignore if  */

/* istanbul ignore next  */

/* module decorator */

/* n */

/* o */

/* reexport */

/* underscore in name -> watch for changes */

/* unused harmony exports AbortedDeferredError, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_convertRoutesToDataRoutes, createHashHistory, createMemoryHistory, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, json, normalizePathname, redirect, resolvePath, unstable_createStaticHandler, warning */

/* unused harmony exports Await, MemoryRouter, Navigate, Outlet, RouterProvider, UNSAFE_DataRouterContext, UNSAFE_DataStaticRouterContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_enhanceManualRouteObjects, createMemoryRouter, createRoutesFromChildren, createRoutesFromElements, renderMatches, useActionData, useAsyncError, useAsyncValue, useInRouterContext, useLoaderData, useMatches, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useRevalidator, useRouteError, useRouteLoaderData, useRoutes */

/* unused harmony exports Form, HashRouter, ScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, unstable_HistoryRouter, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit */

/* unused pure expression or super */

/* unused reexport */

/* useActions */

/* useDispatch */

/* useLocation */

/* useNavigate */

/* useReadingProgress */

/* useSelector */

/*#__PURE__*/

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
     * Determines whether the `index` argument is a valid `number`
     * after being converted from the `string` type.
     * @type {boolean}
     */

/**
     * The `index` argument converted from `string` to `number`.
     * @type {number}
     */

/**
   *
   * @param {*} value
   * @param {Object} options
   * @param {*=} options.parent
   * @param {*=} options.context
   */

/**
   *
   * @param {*} value
   * @param {Object} options
   * @param {Object=} options.context
   * @param {Object=} options.parent
   */

/**
   * A POP indicates a change to an arbitrary index in the history stack, such
   * as a back or forward navigation. It does not describe the direction of the
   * navigation, only that the current index changed.
   *
   * Note: This is the default action for newly created history objects.
   */

/**
   * A PUSH indicates a new entry being added to the history stack, such as when
   * a link is clicked and a new page loads. When this happens, all subsequent
   * entries in the stack are lost.
   */

/**
   * A REPLACE indicates the entry at the current index in the history stack
   * being replaced by a new one.
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Adds a test function to the schema's queue of tests.
   * tests can be exclusive or non-exclusive.
   *
   * - exclusive tests, will replace any existing tests of the same name.
   * - non-exclusive: can be stacked
   *
   * If a non-exclusive test is added to a schema with an exclusive test of the same name
   * the exclusive test is removed and further tests of the same name will be stacked.
   *
   * If an exclusive test is added to a schema with non-exclusive tests of the same name
   * the previous tests are removed and further tests of the same name will replace each other.
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */

/**
 *
 * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
 * NON-CONFORMANT EDITION.
 * © 2011 Colin Snover <http://zetafleet.com>
 * Released under MIT license.
 */

/**
 * @deprecated
 *
 * **We recommend using the `configureStore` method
 * of the `@reduxjs/toolkit` package**, which replaces `createStore`.
 *
 * Redux Toolkit is our recommended approach for writing Redux logic today,
 * including store setup, reducers, data fetching, and more.
 *
 * **For more details, please read this Redux docs page:**
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * `configureStore` from Redux Toolkit is an improved version of `createStore` that
 * simplifies setup and helps avoid common bugs.
 *
 * You should not be using the `redux` core package by itself today, except for learning purposes.
 * The `createStore` method from the core `redux` package will not be removed, but we encourage
 * all users to migrate to using Redux Toolkit for all Redux code.
 *
 * If you want to use `createStore` without this visual deprecation warning, use
 * the `legacy_createStore` import instead:
 *
 * `import { legacy_createStore as createStore} from 'redux'`
 *
 */

/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @private
 * Indirection to leverage useAsyncValue for a render-prop API on <Await>
 */

/**
 * @private
 * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies
 */

/**
 * @private
 */

/**
 * @remix-run/router v1.0.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */

/**
 * A <Link> wrapper that knows if it's "active" or not.
 */

/**
 * A `<Router>` for use in web browsers. Provides the cleanest URLs.
 */

/**
 * A `<Router>` for use in web browsers. Stores the location in the hash
 * portion of the URL so it is not sent to the server.
 */

/**
 * A container for a nested tree of <Route> elements that renders the branch
 * that best matches the current location.
 *
 * @see https://reactrouter.com/docs/en/v6/components/routes
 */

/**
 * A convenient wrapper for reading and writing search parameters via the
 * URLSearchParams interface.
 */

/**
 * A hook to access the redux `dispatch` function.
 *
 * @returns {any|function} redux store's `dispatch` function
 *
 * @example
 *
 * import React, { useCallback } from 'react'
 * import { useDispatch } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const dispatch = useDispatch()
 *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])
 *   return (
 *     <div>
 *       <span>{value}</span>
 *       <button onClick={increaseCounter}>Increase counter</button>
 *     </div>
 *   )
 * }
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the redux store.
 *
 * @returns {any} the redux store
 *
 * @example
 *
 * import React from 'react'
 * import { useStore } from 'react-redux'
 *
 * export const ExampleComponent = () => {
 *   const store = useStore()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * Actions represent the type of change to a location value.
 */

/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * Based on Kendo UI Core expression code <https://github.com/telerik/kendo-ui-core#license-information>
 */

/**
 * Browser history stores the location in regular URLs. This is the standard for
 * most web apps, but it requires some configuration on the server to ensure you
 * serve the same app at multiple URLs.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory
 */

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */

/**
 * Check if the context is valid and ready to dispatch actions.
 *
 * @param scriptContext the result of connecting to the context provider
 * @returns strict context avoiding null values in the type
 */

/**
 * Check if the data-client-token or the data-user-id-token are
 * set in the options of the context.
 * @type data-client-token is use to pass a client token
 * @type data-user-id-token is use to pass a client tokenization key
 *
 * @param scriptContext the result of connecting to the context provider
 * @throws an {@link Error} if both data-client-token and the data-user-id-token keys are null or undefine
 * @returns strict context if one of the keys are defined
 */

/**
 * Check if the given error is an ErrorResponse generated from a 4xx/5xx
 * Response throw from an action/loader
 */

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */

/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

/**
 * Component to use for rendering lazily loaded data from returning defer()
 * in a loader function
 */

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */

/**
 * Converts `string` to
 * [snake case](https://en.wikipedia.org/wiki/Snake_case).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the snake cased string.
 * @example
 *
 * _.snakeCase('Foo Bar');
 * // => 'foo_bar'
 *
 * _.snakeCase('fooBar');
 * // => 'foo_bar'
 *
 * _.snakeCase('--FOO-BAR--');
 * // => 'foo_bar'
 */

/**
 * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the camel cased string.
 * @example
 *
 * _.camelCase('Foo Bar');
 * // => 'fooBar'
 *
 * _.camelCase('--foo-bar--');
 * // => 'fooBar'
 *
 * _.camelCase('__FOO_BAR__');
 * // => 'fooBar'
 */

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 */

/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Creates a Location object with a unique key from the given Path
 */

/**
 * Creates a Redux store that holds the state tree.
 *
 * **We recommend using `configureStore` from the
 * `@reduxjs/toolkit` package**, which replaces `createStore`:
 * **https://redux.js.org/introduction/why-rtk-is-redux-today**
 *
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a URLSearchParams object using the given initializer.
 *
 * This is identical to `new URLSearchParams(init)` except it also
 * supports arrays as values in the object form of the initializer
 * instead of just strings. This is convenient when you need multiple
 * values for a given key, but don't want to use an array initializer.
 *
 * For example, instead of:
 *
 *   let searchParams = new URLSearchParams([
 *     ['sort', 'name'],
 *     ['sort', 'price']
 *   ]);
 *
 * you can do:
 *
 *   let searchParams = createSearchParams({
 *     sort: ['name', 'price']
 *   });
 */

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a route config from a React "children" object, which is usually
 * either a `<Route>` element or an array of them. Used internally by
 * `<Routes>` to create a route config from its children.
 *
 * @see https://reactrouter.com/docs/en/v6/utils/create-routes-from-children
 */

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

/**
 * Creates a string URL path from the given pathname, search, and hash components.
 */

/**
 * Creates a string hash code based on the string argument
 *
 * @param str the source input string to hash
 * @returns string hash code
 */

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */

/**
 * Custom hook to get access to the PayPal Hosted Fields instance.
 * The instance represent the returned object after the render process
 * With this object a user can submit the fields and dynamically modify the cards
 *
 * @returns the hosted fields instance if is available in the component
 */

/**
 * Custom hook to get access to the Script context and
 * dispatch actions to modify the state on the {@link ScriptProvider} component
 *
 * @returns a tuple containing the state of the context and
 * a dispatch function to modify the state
 */

/**
 * Custom hook to get access to the ScriptProvider context
 *
 * @returns the latest state of the context
 */

/**
 * Custom hook to store registered hosted fields children
 * Each `PayPalHostedField` component should be registered on the parent provider
 *
 * @param initialValue the initially registered components
 * @returns at first, an {@link Object} containing the registered hosted fields,
 * and at the second a function handler to register the hosted fields components
 */

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */

/**
 * Declares an element that should be rendered at a certain URL path.
 *
 * @see https://reactrouter.com/docs/en/v6/components/route
 */

/**
 * Deeply get a value from an object via its path.
 */

/**
 * Deeply set a value from in object via it's path. If the value at `path`
 * has changed, return a shallow copy of obj with `value` set at `path`.
 * If `value` has not changed, return the original `obj`.
 *
 * Existing objects / arrays along `path` are also shallow copied. Sibling
 * objects along path retain the same internal js reference. Since new
 * objects / arrays are only created along `path`, we can test if anything
 * changed in a nested structure by comparing the object's reference in
 * the old and new object, similar to how russian doll cache invalidation
 * works.
 *
 * In earlier versions of this function, which used cloneDeep, there were
 * issues whereby settings a nested value would mutate the parent
 * instead of creating a new object. `clone` avoids that bug making a
 * shallow copy of the objects along the update path
 * so no object is mutated in place.
 *
 * Before changing this function, please read through the following
 * discussions.
 *
 * @see https://github.com/developit/linkstate
 * @see https://github.com/jaredpalmer/formik/pull/123
 */

/**
 * Destroy the PayPal SDK from the document page
 *
 * @param reactPayPalScriptID the script identifier
 */

/**
 * Dom7 4.0.4
 * Minimalistic JavaScript library for DOM manipulation, with a jQuery-compatible API
 * https://framework7.io/docs/dom7.html
 *
 * Copyright 2022, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: January 11, 2022
 */

/**
 * For browser-based histories, we combine the state and key into an object
 */

/**
 * Generate a new random identifier for react-paypal-js
 *
 * @returns the {@code string} containing the random library name
 */

/**
 * Get a namespace from the window in the browser
 * this is useful to get the braintree from window
 * after load Braintree script
 *
 * @param namespace the name space to return
 * @returns the namespace if exists or undefined otherwise
 */

/**
 * Get the namespace from the window in the browser
 * this is useful to get the paypal object from window
 * after load PayPal SDK script
 *
 * @param namespace the name space to return
 * @returns the namespace if exists or undefined otherwise
 */

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */

/**
 * Handles the click behavior for router `<Link>` components. This is useful if
 * you need to create custom `<Link>` components with the same click behavior we
 * use in our exported `<Link>`.
 */

/**
 * Hash history stores the location in window.location.hash. This makes it ideal
 * for situations where you don't want to send the location to the server for
 * some reason, either because you do cannot configure it or the URL space is
 * reserved for something else.
 *
 * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory
 */

/**
 * Hook factory, which creates a `useDispatch` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useDispatch` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useSelector` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useSelector` hook bound to the specified context.
 */

/**
 * Hook factory, which creates a `useStore` hook bound to a given context.
 *
 * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.
 * @returns {Function} A `useStore` hook bound to the specified context.
 */

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */

/**
 * Inlined into the react-router repo since use-sync-external-store does not
 * provide a UMD-compatible package, so we need this to be able to distribute
 * UMD react-router bundles
 */

/**
 * Matches the given routes to a location and returns the match data.
 *
 * @see https://reactrouter.com/docs/en/v6/utils/match-routes
 */

/**
 * Memory history stores the current location in memory. It is designed for use
 * in stateful non-browser environments like tests and React Native.
 */

/**
 * Parses a string URL path into its separate pathname, search, and hash components.
 */

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */

/**
 * Performs pattern matching on a URL pathname and returns information about
 * the match.
 *
 * @see https://reactrouter.com/docs/en/v6/utils/match-path
 */

/**
 * Provides location context for the rest of the app.
 *
 * Note: You usually won't render a <Router> directly. Instead, you'll render a
 * router that is more specific to your environment such as a <BrowserRouter>
 * in web browsers or a <StaticRouter> for server rendering.
 *
 * @see https://reactrouter.com/docs/en/v6/routers/router
 */

/**
 * React Router DOM v6.4.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */

/**
 * React Router v6.4.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */

/**
 * Recursively a set the same value for all keys and arrays nested object, cloning
 * @param object
 * @param value
 * @param visited
 * @param response
 */

/**
 * Recursively prepare values.
 */

/**
 * Reducer function to handle complex state changes on the context
 *
 * @param state  the current state on the context object
 * @param action the action to be executed on the previous state
 * @returns a the same state if the action wasn't found, or a new state otherwise
 */

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */

/**
 * Renders the result of `matchRoutes()` into a React element.
 */

/**
 * Resolves the pathname of the given `to` value against the current location.
 *
 * @see https://reactrouter.com/docs/en/v6/hooks/use-resolved-path
 */

/**
 * Returns a path with params interpolated.
 *
 * @see https://reactrouter.com/docs/en/v6/utils/generate-path
 */

/**
 * Returns a resolved path object relative to the given pathname.
 *
 * @see https://reactrouter.com/docs/en/v6/utils/resolve-path
 */

/**
 * Returns an imperative method for changing the location. Used by <Link>s, but
 * may also be used by other elements to change the location.
 *
 * @see https://reactrouter.com/docs/en/v6/hooks/use-navigate
 */

/**
 * Returns the current location object, which represents the current URL in web
 * browsers.
 *
 * Note: If you're using this it may mean you're doing some of your own
 * "routing" in your app, and we'd like to know what your use case is. We may
 * be able to provide something higher-level to better suit your needs.
 *
 * @see https://reactrouter.com/docs/en/v6/hooks/use-location
 */

/**
 * Returns the current navigation action which describes how the router came to
 * the current location, either by a pop, push, or replace on the history stack.
 *
 * @see https://reactrouter.com/docs/en/v6/hooks/use-navigation-type
 */

/**
 * Returns the current navigation, defaulting to an "idle" navigation when
 * no navigation is in progress
 */

/**
 * Returns the element of the route that matched the current location, prepared
 * with the correct context to render the remainder of the route tree. Route
 * elements in the tree must render an <Outlet> to render their child route's
 * element.
 *
 * @see https://reactrouter.com/docs/en/v6/hooks/use-routes
 */

/**
 * Returns the full href for the given "to" value. This is useful for building
 * custom links that are also accessible and preserve right-click behavior.
 *
 * @see https://reactrouter.com/docs/en/v6/hooks/use-href
 */

/**
 * Returns the happy-path data from the nearest ancestor <Await /> value
 */

/**
 * Returns the nearest ancestor Route error, which could be a loader/action
 * error or a render error.  This is intended to be called from your
 * errorElement to display a proper error message.
 */

/**
 * Returns true if the URL for the given "to" value matches the current URL.
 * This is useful for components that need to know "active" state, e.g.
 * <NavLink>.
 *
 * @see https://reactrouter.com/docs/en/v6/hooks/use-match
 */

/**
 * Returns true if this component is a descendant of a <Router>.
 *
 * @see https://reactrouter.com/docs/en/v6/hooks/use-in-router-context
 */

/**
 * SSR Window 4.0.2
 * Better handling for window object in SSR environment
 * https://github.com/nolimits4web/ssr-window
 *
 * Copyright 2021, Vladimir Kharlampidi
 *
 * Licensed under MIT
 *
 * Released on: December 13, 2021
 */

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

/**
 * Simple check to determine if the Braintree is a valid namespace.
 *
 * @param braintreeSource the source {@link BraintreeNamespace}
 * @returns a boolean representing if the namespace is valid.
 */

/**
 * Some array helpers!
 */

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */

/**
 * Swiper React 8.4.4
 * Most modern mobile touch slider and framework with hardware accelerated transitions
 * https://swiperjs.com
 *
 * Copyright 2014-2022 Vladimir Kharlampidi
 *
 * Released under the MIT License
 *
 * Released on: October 12, 2022
 */

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */

/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

/**
 * The interface for the navigate() function returned from useNavigate().
 */

/**
 * The opposite of `_.mapValues`; this method creates an object with the
 * same values as `object` and keys generated by running each own enumerable
 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
 * with three arguments: (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapValues
 * @example
 *
 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value;
 * });
 * // => { 'a1': 1, 'b2': 2 }
 */

/**
 * The public API for rendering a history-aware <a>.
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

/**
 * This is a shortcut for creating `application/json` responses. Converts `data`
 * to JSON and sets the `Content-Type` header.
 */

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */

/**
 * Topological sorting function
 *
 * @param {Array} edges
 * @returns {Array}
 */

/**
 * Transform Yup ValidationError to a more usable object
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Use `actions.braintree` to provide an interface for the paypalCheckoutInstance
 * through the createOrder, createBillingAgreement and onApprove callbacks
 *
 * @param braintreeButtonProps the component button options
 * @returns a new copy of the component button options casted as {@link PayPalButtonsComponentProps}
 */

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

/**
 * Validate a yup schema.
 */

/**
 * When processing relative navigation we want to ignore ancestor routes that
 * do not contribute to the path, such that index/pathless layout routes don't
 * interfere.
 *
 * For example, when moving a route element into an index route and/or a
 * pathless layout route, relative link behavior contained within should stay
 * the same.  Both of the following examples should link back to the root:
 *
 *   <Route path="/">
 *     <Route path="accounts" element={<Link to=".."}>
 *   </Route>
 *
 *   <Route path="/">
 *     <Route path="accounts">
 *       <Route element={<AccountsLayout />}>       // <-- Does not contribute
 *         <Route index element={<Link to=".."} />  // <-- Does not contribute
 *       </Route
 *     </Route>
 *   </Route>
 */

/**
 * deepmerge array merging algorithm
 * https://github.com/KyleAMathews/deepmerge#combine-array
 */

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */

/**
This `<PayPalButtons />` component supports rendering [buttons](https://developer.paypal.com/docs/business/javascript-sdk/javascript-sdk-reference/#buttons) for PayPal, Venmo, and alternative payment methods.
It relies on the `<PayPalScriptProvider />` parent component for managing state related to loading the JS SDK script.
*/

/**
This `<PayPalMessages />` messages component renders a credit messaging on upstream merchant sites.
It relies on the `<PayPalScriptProvider />` parent component for managing state related to loading the JS SDK script.
*/

/**
This `<PayPalScriptProvider />` component takes care of loading the JS SDK `<script>`.
It manages state for script loading so children components like `<PayPalButtons />` know when it's safe to use the `window.paypal` global namespace.

Note: You always should use this component as a wrapper for  `PayPalButtons`, `PayPalMarks`, `PayPalMessages` and `BraintreePayPalButtons` components.
 */

/** @class */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @private is the given object a Function? */

/** @private is the value an empty array? */

/** A function that accepts a potential "extra argument" value to be injected later,
 * and returns an instance of the thunk middleware that uses that value
 */

/** Built-in value references. */

/** Detect free variable `exports`. */

/** Detect free variable `global` from Node.js. */

/** Detect free variable `self`. */

/** Error message constants. */

/** Return multi select values based on an array of options */

/** Return the next value for a checkbox */

/** Used as references for various `Number` constants. */

/** Used as the maximum memoize cache size. */

/** Used as the size to enable large array optimizations. */

/** Used for built-in method references. */

/** Used to check objects for own properties. */

/** Used to compose bitmasks for value comparisons. */

/** Used to compose unicode capture groups. */

/** Used to compose unicode character classes. */

/** Used to detect methods masquerading as native. */

/** Used to detect overreaching core-js shims. */

/** Used to detect strings that need a more robust regexp to match words. */

/** Used to detect unsigned integer values. */

/** Used to map Latin Unicode letters to basic Latin letters. */

/** Used to match Latin Unicode letters (excluding mathematical operators). */

/** Used to match property names within property paths. */

/** Used to match words composed of alphanumeric characters. */

/** Used to resolve the decompiled source of functions. */

/** Used to stand-in for `undefined` hash values. */

/** `Object#toString` result references. */

/*********************************************
 * Common reference to the script identifier *
 *********************************************/

/************************************************************************/

/******/

/***/

/*eslint-disable */

//

// 	L.DomEvent.stopPropagation(ev);

// 	layer.bindPopup('Hello');

//              1 YYYY                 2 MM        3 DD              4 HH     5 mm        6 ss            7 msec         8 Z 9 ±    10 tzHH    11 tzmm

//   TCast,

//   TContext,

//   TOutput

//   mergedSpec.nullable = base.spec.nullable;

//   mergedSpec.presence = base.spec.presence;

//   return this as any;

//  except , Safari and

//  so we can try/catch executeSubmit(), if it returns undefined, then just bail.

//  view regardless of where the mouse was.

// '.swipe-handler',

// 'slide' or 'fade' or 'cube' or 'coverflow' or 'flip'

// (Bounds) -> Boolean

// (Function) || (String, args...)

// (HTMLElement or String, Object)

// (LatLng)

// (LatLng, LatLng) or (LatLng[])

// (LatLngBounds) or (LatLng) -> Boolean

// (LatLngBounds[, Boolean, Point]) -> Number

// (MouseEvent)

// (Point)

// (Point, Number) -> Point

// (Required for linked SVG elements in IE11.)

// (String, LatLngBounds, Object)

// (e.g. `0.5` or `0.1`) allow for greater granularity. A value of `0`

// (e.g. to validate an API token).

// (e.g. user stopped dragging the map or after non-centered zoom).

// (modifying the segment points directly!). Used by Leaflet to only show polyline

// (object the `this` keyword will point to). You can also pass several

// (so that the `this` keyword refers to `context` inside `fn`'s code). The function

// (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

// (used by Leaflet internally to position its layers).

// (you can alternatively add it later with `addData` method) and an `options` object.

// **(required)** Comma-separated list of WMS layers to show.

// -> Point

// -Infinity for max, Infinity for min

// .css('width')

// .css('width', '100px')

// .css({ width: '100px' })

// /user-preferences since `-` counts as a word boundary.

// 0 means "already installed".

// 1. this isn't strict so the casting will also have cast inner values

// 2. this is strict in which case the nested values weren't cast either

// <label> (and vice versa) triggering two clicks in quick succession.

// > {

// ???

// @aka Canvas options

// @aka Circle options

// @aka CircleMarker options

// @aka Control Options

// @aka Control.Attribution options

// @aka Control.Layers options

// @aka Control.Scale options

// @aka Control.Zoom options

// @aka DivIcon options

// @aka DivOverlay options

// @aka Draggable options

// @aka GridLayer options

// @aka ImageOverlay options

// @aka L.Class

// @aka L.Handler

// @aka Marker options

// @aka Path options

// @aka Polyline options

// @aka Popup options

// @aka Renderer options

// @aka TileLayer options

// @aka TileLayer.WMS options

// @aka Tooltip options

// @aka VideoOverlay options

// @alternative

// @class Class

// @class Handler

// @constructor L.Draggable(el: HTMLElement, dragHandle?: HTMLElement, preventOutline?: Boolean, options?: Draggable options)

// @event autopanstart: Event

// @event baselayerchange: LayersControlEvent

// @event click: MouseEvent

// @event contentupdate: Event

// @event contextmenu: MouseEvent

// @event dblclick: MouseEvent

// @event down: Event

// @event drag: Event

// @event dragend: DragEndEvent

// @event dragstart: Event

// @event end: Event

// @event error: Event

// @event keydown: KeyboardEvent

// @event keypress: KeyboardEvent

// @event keyup: KeyboardEvent

// @event load: Event

// @event loading: Event

// @event locationerror: ErrorEvent

// @event locationfound: LocationEvent

// @event mousedown: MouseEvent

// @event mousemove: MouseEvent

// @event mouseout: MouseEvent

// @event mouseover: MouseEvent

// @event mouseup: MouseEvent

// @event move: Event

// @event moveend: Event

// @event movestart: Event

// @event overlayadd: LayersControlEvent

// @event overlayremove: LayersControlEvent

// @event popupclose: PopupEvent

// @event popupopen: PopupEvent

// @event preclick: MouseEvent

// @event predrag: Event

// @event start: Event

// @event step: Event

// @event tileabort: TileEvent

// @event tileerror: TileErrorEvent

// @event tileload: TileEvent

// @event tileloadstart: TileEvent

// @event tileunload: TileEvent

// @event tooltipclose: TooltipEvent

// @event tooltipopen: TooltipEvent

// @event unload: Event

// @event viewreset: Event

// @event zoom: Event

// @event zoomanim: ZoomAnimEvent

// @event zoomend: Event

// @event zoomlevelschange: Event

// @event zoomstart: Event

// @factory L.bounds(corner1: Point, corner2: Point)

// @factory L.bounds(points: Point[])

// @factory L.canvas(options?: Renderer options)

// @factory L.circle(latlng: LatLng, options?: Circle options)

// @factory L.circle(latlng: LatLng, radius: Number, options?: Circle options)

// @factory L.circleMarker(latlng: LatLng, options?: CircleMarker options)

// @factory L.control.attribution(options: Control.Attribution options)

// @factory L.control.layers(baselayers?: Object, overlays?: Object, options?: Control.Layers options)

// @factory L.control.zoom(options: Control.Zoom options)

// @factory L.divIcon(options: DivIcon options)

// @factory L.geoJSON(geojson?: Object, options?: GeoJSON options)

// @factory L.gridLayer(options?: GridLayer options)

// @factory L.icon(options: Icon options)

// @factory L.latLng(coords: Array): LatLng

// @factory L.latLng(coords: Object): LatLng

// @factory L.latLng(latitude: Number, longitude: Number, altitude?: Number): LatLng

// @factory L.latLngBounds(corner1: LatLng, corner2: LatLng)

// @factory L.latLngBounds(latlngs: LatLng[])

// @factory L.layerGroup(layers?: Layer[], options?: Object)

// @factory L.map(el: HTMLElement, options?: Map options)

// @factory L.map(id: String, options?: Map options)

// @factory L.marker(latlng: LatLng, options? : Marker options)

// @factory L.point(coords: Number[])

// @factory L.point(coords: Object)

// @factory L.point(x: Number, y: Number, round?: Boolean)

// @factory L.polygon(latlngs: LatLng[], options?: Polyline options)

// @factory L.polyline(latlngs: LatLng[], options?: Polyline options)

// @factory L.popup(latlng: LatLng, options?: Popup options)

// @factory L.popup(options?: Popup options, source?: Layer)

// @factory L.rectangle(latLngBounds: LatLngBounds, options?: Polyline options)

// @factory L.svg(options?: Renderer options)

// @factory L.svgOverlay(svg: String|SVGElement, bounds: LatLngBounds, options?: SVGOverlay options)

// @factory L.tileLayer.wms(baseUrl: String, options: TileLayer.WMS options)

// @factory L.tilelayer(urlTemplate: String, options?: TileLayer options)

// @factory L.tooltip(latlng: LatLng, options?: Tooltip options)

// @factory L.tooltip(options?: Tooltip options, source?: Layer)

// @factory L.transformation(a: Number, b: Number, c: Number, d: Number)

// @factory L.transformation(coefficients: Array): Transformation

// @factory L.videoOverlay(video: String|Array|HTMLVideoElement, bounds: LatLngBounds, options?: VideoOverlay options)

// @function addClass(el: HTMLElement, name: String)

// @function addInitHook(fn: Function): this

// @function addTo(map: Map, name: String): this

// @function asFeature(geojson: Object): Object

// @function bind(fn: Function, …): Function

// @function cancelAnimFrame(id: Number): undefined

// @function clipSegment(a: Point, b: Point, bounds: Bounds, useLastCode?: Boolean, round?: Boolean): Point[]|Boolean

// @function closestPointOnSegment(p: Point, p1: Point, p2: Point): Number

// @function coordsToLatLng(coords: Array): LatLng

// @function coordsToLatLngs(coords: Array, levelsDeep?: Number, coordsToLatLng?: Function): Array

// @function create(name: String): SVGElement

// @function create(proto: Object, properties?: Object): Object

// @function create(tagName: String, className?: String, container?: HTMLElement): HTMLElement

// @function disableClickPropagation(el: HTMLElement): this

// @function disableImageDrag()

// @function disableScrollPropagation(el: HTMLElement): this

// @function disableTextSelection()

// @function empty(el: HTMLElement)

// @function enableImageDrag()

// @function enableTextSelection()

// @function extend(dest: Object, src?: Object): Object

// @function extend(props: Object): Function

// @function falseFn(): Function

// @function formatNum(num: Number, precision?: Number|false): Number

// @function geometryToLayer(featureData: Object, options?: GeoJSON options): Layer

// @function get(id: String|HTMLElement): HTMLElement

// @function getClass(el: HTMLElement): String

// @function getMousePosition(ev: DOMEvent, container?: HTMLElement): Point

// @function getParamString(obj: Object, existingUrl?: String, uppercase?: Boolean): String

// @function getPosition(el: HTMLElement): Point

// @function getPropagationPath(ev: DOMEvent): Array

// @function getScale(el: HTMLElement): Object

// @function getSizedParentNode(el: HTMLElement): HTMLElement

// @function getStyle(el: HTMLElement, styleAttrib: String): String

// @function getWheelDelta(ev: DOMEvent): Number

// @function hasClass(el: HTMLElement, name: String): Boolean

// @function include(properties: Object): this

// @function indexOf(array: Array, el: Object): Number

// @function isArray(obj): Boolean

// @function isFlat(latlngs: LatLng[]): Boolean

// @function latLngToCoords(latlng: LatLng, precision?: Number|false): Array

// @function latLngsToCoords(latlngs: Array, levelsDeep?: Number, closed?: Boolean, precision?: Number|false): Array

// @function mergeOptions(options: Object): this

// @function off(el: HTMLElement): this

// @function off(el: HTMLElement, eventMap: Object, context?: Object): this

// @function off(el: HTMLElement, types: String): this

// @function off(el: HTMLElement, types: String, fn: Function, context?: Object): this

// @function on(el: HTMLElement, eventMap: Object, context?: Object): this

// @function on(el: HTMLElement, types: String, fn: Function, context?: Object): this

// @function pointToSegmentDistance(p: Point, p1: Point, p2: Point): Number

// @function pointsToPath(rings: Point[], closed: Boolean): String

// @function preventDefault(ev: DOMEvent): this

// @function preventOutline(el: HTMLElement)

// @function remove(el: HTMLElement)

// @function removeClass(el: HTMLElement, name: String)

// @function requestAnimFrame(fn: Function, context?: Object, immediate?: Boolean): Number

// @function restoreOutline()

// @function setClass(el: HTMLElement, name: String)

// @function setOpacity(el: HTMLElement, opacity: Number)

// @function setOptions(obj: Object, options: Object): Object

// @function setPosition(el: HTMLElement, position: Point)

// @function setTransform(el: HTMLElement, offset: Point, scale?: Number)

// @function simplify(points: Point[], tolerance: Number): Point[]

// @function splitWords(str: String): String[]

// @function stamp(obj: Object): Number

// @function stop(ev: DOMEvent): this

// @function stopPropagation(ev: DOMEvent): this

// @function template(str: String, data: Object): String

// @function testProp(props: String[]): String|false

// @function throttle(fn: Function, time: Number, context: Object): Function

// @function toBack(el: HTMLElement)

// @function toFront(el: HTMLElement)

// @function trim(str: String): String

// @function wrapNum(num: Number, range: Number[], includeMax?: Boolean): Number

// @method add(otherPoint: Point): Point

// @method addAttribution(text: String): this

// @method addBaseLayer(layer: Layer, name: String): this

// @method addControl(control: Control): this

// @method addData( <GeoJSON> data ): this

// @method addEventListener(…): this

// @method addEventParent(obj: Evented): this

// @method addHandler(name: String, HandlerClass: Function): this

// @method addHooks()

// @method addLatLng(latlng: LatLng, latlngs?: LatLng[]): this

// @method addLayer(layer: Layer): this

// @method addOneTimeEventListener(…): this

// @method addOverlay(layer: Layer, name: String): this

// @method addTo(map: Map): this

// @method bindPopup(content: String|HTMLElement|Function|Popup, options?: Popup options): this

// @method bindTooltip(content: String|HTMLElement|Function|Tooltip, options?: Tooltip options): this

// @method bringToBack(): this

// @method bringToBack: this

// @method bringToFront(): this

// @method bringToFront: this

// @method ceil(): Point

// @method clearAllEventListeners(…): this

// @method clearLayers(): this

// @method clone(): Point

// @method close(): this

// @method closePopup(): this

// @method closePopup(popup?: Popup): this

// @method closeTooltip(): this

// @method closeTooltip(tooltip: Tooltip): this

// @method closestLayerPoint(p: Point): Point

// @method collapse(): this

// @method containerPointToLatLng(point: Point): LatLng

// @method containerPointToLayerPoint(point: Point): Point

// @method contains (latlng: LatLng): Boolean

// @method contains(otherBounds: Bounds): Boolean

// @method contains(otherBounds: LatLngBounds): Boolean

// @method contains(otherPoint: Point): Boolean

// @method contains(point: Point): Boolean

// @method createIcon(oldIcon?: HTMLElement): HTMLElement

// @method createPane(name: String, container?: HTMLElement): HTMLElement

// @method createShadow(oldIcon?: HTMLElement): HTMLElement

// @method createTile(coords: Object, done?: Function): HTMLElement

// @method disable()

// @method disable(): this

// @method distance(latlng1: LatLng, latlng2: LatLng): Number

// @method distanceTo(otherLatLng: LatLng): Number

// @method distanceTo(otherPoint: Point): Number

// @method divideBy(num: Number): Point

// @method eachLayer(fn: Function, context?: Object): this

// @method enable()

// @method enable(): this

// @method enabled(): Boolean

// @method equals(otherBounds: Bounds): Boolean

// @method equals(otherBounds: LatLngBounds, maxMargin?: Number): Boolean

// @method equals(otherLatLng: LatLng, maxMargin?: Number): Boolean

// @method equals(otherPoint: Point): Boolean

// @method expand(): this

// @method extend(latlng: LatLng): this

// @method extend(otherBounds: Bounds): this

// @method extend(otherBounds: LatLngBounds): this

// @method extend(point: Point): this

// @method fire(type: String, data?: Object, propagate?: Boolean): this

// @method fireEvent(…): this

// @method fitBounds(bounds: LatLngBounds, options?: fitBounds options): this

// @method fitWorld(options?: fitBounds options): this

// @method floor(): Point

// @method flyTo(latlng: LatLng, zoom?: Number, options?: Zoom/pan options): this

// @method flyToBounds(bounds: LatLngBounds, options?: fitBounds options): this

// @method getAttribution: String

// @method getBottomLeft(): Point

// @method getBottomRight(): Point

// @method getBounds(): LatLngBounds

// @method getBoundsZoom(bounds: LatLngBounds, inside?: Boolean, padding?: Point): Number

// @method getCenter(): LatLng

// @method getCenter(round?: Boolean): Point

// @method getContainer: HTMLElement

// @method getContent: String|HTMLElement

// @method getEast(): Number

// @method getElement(): HTMLElement

// @method getElement(): HTMLVideoElement

// @method getElement(): SVGElement

// @method getElement: String|HTMLElement

// @method getIcon: Icon

// @method getLatLng(): LatLng

// @method getLatLng: LatLng

// @method getLatLngs(): LatLng[]

// @method getLayer(id: Number): Layer

// @method getLayerId(layer: Layer): Number

// @method getLayers(): Layer[]

// @method getMaxZoom(): Number

// @method getMinZoom(): Number

// @method getNorth(): Number

// @method getNorthEast(): LatLng

// @method getNorthWest(): LatLng

// @method getPane(name? : String): HTMLElement

// @method getPane(pane: String|HTMLElement): HTMLElement

// @method getPanes(): Object

// @method getPixelBounds(): Bounds

// @method getPixelOrigin(): Point

// @method getPixelWorldBounds(zoom?: Number): Bounds

// @method getPopup(): Popup

// @method getProjectedBounds(zoom: Number): Bounds

// @method getRadius(): Number

// @method getScaleZoom(scale: Number, fromZoom: Number): Number

// @method getSize(): Point

// @method getSouth(): Number

// @method getSouthEast(): LatLng

// @method getSouthWest(): LatLng

// @method getTileSize: Point

// @method getTileUrl(coords: Object): String

// @method getTooltip(): Tooltip

// @method getTopLeft(): Point

// @method getTopRight(): Point

// @method getWest(): Number

// @method getZoom(): Number

// @method getZoomScale(toZoom: Number, fromZoom: Number): Number

// @method hasEventListeners(…): Boolean

// @method hasLayer(id: Number): Boolean

// @method hasLayer(layer: Layer): Boolean

// @method intersects(otherBounds: Bounds): Boolean

// @method intersects(otherBounds: LatLngBounds): Boolean

// @method invalidateSize(animate: Boolean): this

// @method invalidateSize(options: Zoom/pan options): this

// @method invoke(methodName: String, …): this

// @method isEmpty(): Boolean

// @method isLoading: Boolean

// @method isOpen: Boolean

// @method isPopupOpen(): boolean

// @method isTooltipOpen(): boolean

// @method isValid(): Boolean

// @method latLngToContainerPoint(latlng: LatLng): Point

// @method latLngToLayerPoint(latlng: LatLng): Point

// @method latLngToPoint(latlng: LatLng, zoom: Number): Point

// @method layerPointToContainerPoint(point: Point): Point

// @method layerPointToLatLng(point: Point): LatLng

// @method listens(type: String, fn: Function, context?: Object, propagate?: Boolean): Boolean

// @method listens(type: String, propagate?: Boolean): Boolean

// @method locate(options?: Locate options): this

// @method mouseEventToContainerPoint(ev: MouseEvent): Point

// @method mouseEventToLatLng(ev: MouseEvent): LatLng

// @method mouseEventToLayerPoint(ev: MouseEvent): Point

// @method multiplyBy(num: Number): Point

// @method once(…): this

// @method openOn(map: Map): this

// @method openPopup(content: String|HTMLElement, latlng: LatLng, options?: Popup options): this

// @method openPopup(latlng?: LatLng): this

// @method openPopup(popup: Popup): this

// @method openTooltip(content: String|HTMLElement, latlng: LatLng, options?: Tooltip options): this

// @method openTooltip(latlng?: LatLng): this

// @method openTooltip(tooltip: Tooltip): this

// @method overlaps(otherBounds: Bounds): Boolean

// @method overlaps(otherBounds: LatLngBounds): Boolean

// @method pad(bufferRatio: Number): Bounds

// @method pad(bufferRatio: Number): LatLngBounds

// @method panBy(offset: Point, options?: Pan options): this

// @method panInside(latlng: LatLng, options?: padding options): this

// @method panInsideBounds(bounds: LatLngBounds, options?: Pan options): this

// @method panTo(latlng: LatLng, options?: Pan options): this

// @method pointToLatLng(point: Point, zoom: Number): LatLng

// @method project(latlng: LatLng): Point

// @method project(latlng: LatLng, zoom: Number): Point

// @method redraw(): this

// @method redraw: this

// @method remove(): this

// @method remove: this

// @method removeAttribution(text: String): this

// @method removeControl(control: Control): this

// @method removeEventListener(…): this

// @method removeEventParent(obj: Evented): this

// @method removeFrom(group: LayerGroup): this

// @method removeFrom(map: Map): this

// @method removeHooks()

// @method removeLayer(id: Number): this

// @method removeLayer(layer: Layer): this

// @method resetStyle( <Path> layer? ): this

// @method round(): Point

// @method run(el: HTMLElement, newPos: Point, duration?: Number, easeLinearity?: Number)

// @method scale(zoom: Number): Number

// @method scaleBy(scale: Point): Point

// @method setBounds(bounds: LatLngBounds): this

// @method setBounds(latLngBounds: LatLngBounds): this

// @method setContent(htmlContent: String|HTMLElement|Function): this

// @method setIcon(icon: Icon): this

// @method setLatLng(latLng: LatLng): this

// @method setLatLng(latlng: LatLng): this

// @method setLatLngs(latlngs: LatLng[]): this

// @method setMaxBounds(bounds: LatLngBounds): this

// @method setMaxZoom(zoom: Number): this

// @method setMinZoom(zoom: Number): this

// @method setOpacity(opacity: Number): this

// @method setParams(params: Object, noRedraw?: Boolean): this

// @method setPopupContent(content: String|HTMLElement|Popup): this

// @method setPosition(position: string): this

// @method setPrefix(prefix: String|false): this

// @method setRadius(radius: Number): this

// @method setStyle( <Function> style ): this

// @method setStyle(style: Path options): this

// @method setTooltipContent(content: String|HTMLElement|Tooltip): this

// @method setUrl(url: String): this

// @method setUrl(url: String, noRedraw?: Boolean): this

// @method setView(center: LatLng, zoom: Number, options?: Zoom/pan options): this

// @method setZIndex(value: Number): this

// @method setZIndex(zIndex: Number): this

// @method setZIndexOffset(offset: Number): this

// @method setZoom(zoom: Number, options?: Zoom/pan options): this

// @method setZoomAround(latlng: LatLng, zoom: Number, options: Zoom options): this

// @method setZoomAround(offset: Point, zoom: Number, options: Zoom options): this

// @method stop()

// @method stop(): this

// @method stopLocate(): this

// @method subtract(otherPoint: Point): Point

// @method toBBoxString(): String

// @method toBounds(sizeInMeters: Number): LatLngBounds

// @method toGeoJSON(precision?: Number|false): Object

// @method toString(): String

// @method toggle(layer?: Layer): this

// @method togglePopup(): this

// @method toggleTooltip(): this

// @method transform(point: Point, scale?: Number): Point

// @method trunc(): Point

// @method unbindPopup(): this

// @method unbindTooltip(): this

// @method unproject(point: Point): LatLng

// @method unproject(point: Point, zoom: Number): LatLng

// @method unscaleBy(scale: Point): Point

// @method untransform(point: Point, scale?: Number): Point

// @method update: null

// @method whenReady(fn: Function, context?: Object): this

// @method wrap(): LatLng

// @method wrapLatLng(latlng: LatLng): LatLng

// @method wrapLatLngBounds(bounds: LatLngBounds): LatLngBounds

// @method zoom(scale: Number): Number

// @method zoomIn(delta?: Number, options?: Zoom options): this

// @method zoomOut(delta?: Number, options?: Zoom options): this

// @namespace CircleMarker

// @namespace Control.Attribution

// @namespace Control.Layers

// @namespace Control.Zoom

// @namespace DivOverlay

// @namespace GeoJSON

// @namespace Layer

// @namespace LayerGroup

// @namespace Map

// @namespace Map; @method getRenderer(layer: Path): Renderer

// @namespace Map; @option preferCanvas: Boolean = false

// @namespace Marker

// @namespace Path

// @namespace Path; @option renderer: Renderer

// @namespace Polygon

// @namespace Polyline

// @namespace Popup

// @namespace SVG

// @namespace SVG; @section

// @namespace Tooltip

// @option alt: String = ''

// @option alt: String = 'Marker'

// @option attribution: String = null

// @option attributionControl: Boolean = true

// @option autoClose: Boolean = true

// @option autoPan: Boolean = false

// @option autoPan: Boolean = true

// @option autoPanOnFocus: Boolean = true

// @option autoPanPadding: Point = Point(5, 5)

// @option autoPanPadding: Point = Point(50, 50)

// @option autoPanPaddingBottomRight: Point = null

// @option autoPanPaddingTopLeft: Point = null

// @option autoPanSpeed: Number = 10

// @option autoZIndex: Boolean = true

// @option autoplay: Boolean = true

// @option bgPos: Point = [0, 0]

// @option bounceAtZoomLimits: Boolean = true

// @option bounds: LatLngBounds = undefined

// @option boxZoom: Boolean = true

// @option bubblingMouseEvents: Boolean = false

// @option bubblingMouseEvents: Boolean = true

// @option center: LatLng = undefined

// @option className: String = ''

// @option className: String = null

// @option clickTolerance: Number = 3

// @option closeButton: Boolean = true

// @option closeOnClick: Boolean = *

// @option closeOnEscapeKey: Boolean = true

// @option collapsed: Boolean = true

// @option color: String = '#3388ff'

// @option content: String|HTMLElement|Function = ''

// @option crossOrigin: Boolean|String = false

// @option crs: CRS = L.CRS.EPSG3857

// @option crs: CRS = null

// @option dashArray: String = null

// @option dashOffset: String = null

// @option detectRetina: Boolean = false

// @option direction: String = 'auto'

// @option doubleClickZoom: Boolean|String = true

// @option draggable: Boolean = false

// @option dragging: Boolean = true

// @option easeLinearity: Number = 0.2

// @option errorOverlayUrl: String = ''

// @option errorTileUrl: String = ''

// @option fadeAnimation: Boolean = true

// @option fill: Boolean = depends

// @option fillColor: String = *

// @option fillOpacity: Number = 0.2

// @option fillRule: String = 'evenodd'

// @option format: String = 'image/jpeg'

// @option hideSingleBase: Boolean = false

// @option html: String|HTMLElement = ''

// @option icon: Icon = *

// @option imagePath: String

// @option imperial: Boolean = True

// @option inertia: Boolean = *

// @option inertiaDeceleration: Number = 3000

// @option inertiaMaxSpeed: Number = Infinity

// @option interactive: Boolean = false

// @option keepAspectRatio: Boolean = true

// @option keepBuffer: Number = 2

// @option keepInView: Boolean = false

// @option keyboard: Boolean = true

// @option keyboardPanDelta: Number = 80

// @option layers: Layer[] = []

// @option layers: String = ''

// @option lineCap: String= 'round'

// @option lineJoin: String = 'round'

// @option loop: Boolean = true

// @option markerZoomAnimation: Boolean = true

// @option maxBounds: LatLngBounds = null

// @option maxBoundsViscosity: Number = 0.0

// @option maxHeight: Number = null

// @option maxNativeZoom: Number = undefined

// @option maxWidth: Number = 100

// @option maxWidth: Number = 300

// @option maxZoom: Number = *

// @option maxZoom: Number = 18

// @option maxZoom: Number = undefined

// @option metric: Boolean = True

// @option minNativeZoom: Number = undefined

// @option minWidth: Number = 50

// @option minZoom: Number = *

// @option minZoom: Number = 0

// @option muted: Boolean = false

// @option noClip: Boolean = false

// @option noWrap: Boolean = false

// @option offset: Point = Point(0, 0)

// @option offset: Point = Point(0, 7)

// @option opacity: Number = 0.9

// @option opacity: Number = 1.0

// @option padding: Number = 0.1

// @option pane: String = 'markerPane'

// @option pane: String = 'overlayPane'

// @option pane: String = 'popupPane'

// @option pane: String = 'tilePane'

// @option pane: String = 'tooltipPane'

// @option pane: String = undefined

// @option permanent: Boolean = false

// @option playsInline: Boolean = true

// @option position: String = 'topright'

// @option prefix: String|false = 'Leaflet'

// @option radius: Number = 10

// @option radius: Number; Radius of the circle, in meters.

// @option referrerPolicy: Boolean|String = false

// @option renderer: Renderer = *

// @option riseOffset: Number = 250

// @option riseOnHover: Boolean = false

// @option scrollWheelZoom: Boolean|String = true

// @option shadowPane: String = 'shadowPane'

// @option smoothFactor: Number = 1.0

// @option sortFunction: Function = *

// @option sortLayers: Boolean = false

// @option sticky: Boolean = false

// @option stroke: Boolean = true

// @option styles: String = ''

// @option subdomains: String|String[] = 'abc'

// @option tapHold: Boolean

// @option tapTolerance: Number = 15

// @option tileSize: Number|Point = 256

// @option title: String = ''

// @option tms: Boolean = false

// @option tolerance: Number = 0

// @option touchZoom: Boolean|String = *

// @option trackResize: Boolean = true

// @option transform3DLimit: Number = 2^23

// @option transparent: Boolean = false

// @option updateInterval: Number = 200

// @option updateWhenIdle: Boolean = (depends)

// @option updateWhenZooming: Boolean = true

// @option uppercase: Boolean = false

// @option version: String = '1.1.1'

// @option weight: Number = 3

// @option wheelDebounceTime: Number = 40

// @option wheelPxPerZoomLevel: Number = 60

// @option worldCopyJump: Boolean = false

// @option zIndex: Number = 1

// @option zIndexOffset: Number = 0

// @option zoom: Number = undefined

// @option zoomAnimation: Boolean = true

// @option zoomAnimationThreshold: Number = 4

// @option zoomControl: Boolean = true

// @option zoomDelta: Number = 1

// @option zoomInText: String = '<span aria-hidden="true">+</span>'

// @option zoomInTitle: String = 'Zoom in'

// @option zoomOffset: Number = 0

// @option zoomOutText: String = '<span aria-hidden="true">&#x2212;</span>'

// @option zoomOutTitle: String = 'Zoom out'

// @option zoomReverse: Boolean = false

// @option zoomSnap: Number = 1

// @pane mapPane: HTMLElement = 'auto'

// @pane markerPane: HTMLElement = 600

// @pane overlayPane: HTMLElement = 400

// @pane popupPane: HTMLElement = 700

// @pane shadowPane: HTMLElement = 500

// @pane tilePane: HTMLElement = 200

// @pane tooltipPane: HTMLElement = 650

// @property TRANSFORM: String

// @property TRANSITION: String

// @property alt: Number

// @property boxZoom: Handler

// @property code: String

// @property doubleClickZoom: Handler

// @property dragging: Handler

// @property emptyImageUrl: String

// @property ie: Boolean; `true` for all Internet Explorer versions (not Edge).

// @property infinite: Boolean

// @property keyboard: Handler

// @property lastId: Number

// @property lat: Number

// @property lng: Number

// @property max: Point

// @property min: Point

// @property scrollWheelZoom: Handler

// @property tapHold: Handler

// @property touchZoom: Handler

// @property wrapLat: Number[]

// @property wrapLng: Number[]

// @property x: Number; The `x` coordinate of the point

// @property y: Number; The `y` coordinate of the point

// @property zoomControl: Control.Zoom

// @section

// @section Animation Options

// @section Control options

// @section Controls

// @section Conversion Methods

// @section DivOverlay events

// @section Draggable marker options

// @section Dragging events

// @section Extension methods

// @section Geolocation methods

// @section Handlers

// @section Interaction Options

// @section Interaction events

// @section Keyboard Navigation Options

// @section Layer events

// @section Location events

// @section Map State Options

// @section Map state change events

// @section Methods for Getting Map State

// @section Methods for Layers and Controls

// @section Methods for modifying map state

// @section Mouse wheel options

// @section Other Events

// @section Other Methods

// @section Other methods

// @section Panning Inertia Options

// @section Popup events

// @section Popup methods

// @section There is static function which can be called without instantiating L.Handler:

// @section Tooltip events

// @section Tooltip methods

// @section Touch interaction options

// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805

// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85

// @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string

// @see https://github.com/webpack-contrib/style-loader/issues/177

// @see https://reactjs.org/docs/events.html#event-pooling

// @todo Fix TS 3.2.1

// @ts-expect-error

// @ts-expect-error this is readonly

// @ts-ignore

// @ts-ignore 'AnyAction' is assignable to the constraint of type 'A', but 'A' could be instantiated with a different subtype

// @ts-ignore _contentNode missing in type definition

// @uninheritable

// A [compare function](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)

// A custom CSS class name to assign to the overlay.

// A custom CSS class name to assign to the popup.

// A custom class name to assign to the image. Empty by default.

// A custom class name to assign to the tile layer. Empty by default.

// A string that defines [how the inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined.

// A string that defines [shape to be used at the corners](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) of the stroke.

// A string that defines [shape to be used at the end](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) of the stroke.

// A string that defines the [distance into the dash pattern to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset). Doesn't work on `Canvas`-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).

// A string that defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray). Doesn't work on `Canvas`-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).

// A viewBox attribute is required on the SVG element to zoom in and out properly.

// Abstract class for map interaction handlers

// Active classes

// Add Classes

// Add methods to `Hash`.

// Add methods to `ListCache`.

// Add methods to `MapCache`.

// Add methods to `SetCache`.

// Add methods to `Stack`.

// Add properties assigned by `RegExp#exec`.

// Add the children before adding this route to the array so we traverse the

// Adds `name` to the element's class attribute.

// Adds `stopPropagation` to the element's `'click'`, `'dblclick'`, `'contextmenu'`,

// Adds `stopPropagation` to the element's `'wheel'` events (plus browser variants).

// Adds a GeoJSON object to the layer.

// Adds a [constructor hook](#class-constructor-hooks) to the class.

// Adds a base layer (radio button entry) with the given name to the control.

// Adds a given point to the polyline. By default, adds to the first ring of

// Adds a listener function (`fn`) to a particular DOM event type of the

// Adds a new Handler to the given map with the given name.

// Adds a new `Handler` to the map, given its name and constructor function.

// Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`

// Adds an attribution text (e.g. `'&copy; OpenStreetMap contributors'`).

// Adds an event parent - an `Evented` that will receive propagated events

// Adds an overlay (checkbox entry) with the given name to the control.

// Adds the control to the given map.

// Adds the given control to the map

// Adds the given layer to the group.

// Adds the given layer to the map

// Adds the overlay to the map.

// Adds the popup to the map and closes the previous one.

// Alias to [`fire(…)`](#evented-fire)

// Alias to [`listens(…)`](#evented-listens)

// Alias to [`off()`](#evented-off)

// Alias to [`off(…)`](#evented-off)

// Alias to [`on(…)`](#evented-on)

// Alias to [`once(…)`](#evented-once)

// All other components like messages and marks must be requested using the "components" query parameter

// Allow injecting another batching function later

// Already tracked promise - check contents

// Also released as a separated micro-library [Simplify.js](https://mourner.github.io/simplify-js/).

// Alternative to `layer.togglePopup()`/`.toggleTooltip()`.

// Alternative to `map.closePopup(popup)`/`.closeTooltip(tooltip)`

// Alternative to `map.openPopup(popup)`.

// Alternative to `map.openPopup(popup)`/`.openTooltip(tooltip)`.

// Altitude in meters (optional)

// Always export us to window global (see #2364)

// Always fire 'zoom' if pinching because #3530

// Amount of pixels to pan when pressing an arrow key.

// An array of two numbers defining whether the longitude (horizontal) coordinate

// Android

// Any reducers that existed in both the new and old rootReducer

// Argument may be omitted only for overlay bound to layer.

// Array of layers that will be added to the map initially

// Arrays

// As [`L.DomUtil.disableTextSelection`](#domutil-disabletextselection), but

// As `createIcon`, but for the shadow beneath it.

// Assume cyclic values are equal.

// Attach events

// Attach the factory function so users can create a customized version

// Attach to a Map

// Attach to container component

// Autoheight

// Avoid failures from read-only properties

// Avoid unhandled rejection warnings

// Backward compatibility.

// Backwards compatibility with 0.7.x factory (latlng, radius, options?)

// Bail if it's sync, consumer is responsible for cleaning up

// Because of that, the useSyncExternalStore compat shim is needed.

// Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.

// Binds a popup to the layer with the passed `content` and sets up the

// Binds a tooltip to the layer with the passed `content` and sets up the

// Box (shift-drag with mouse) zoom handler.

// Breakpoints

// Brings the layer group to the back of all other layers

// Brings the layer group to the top of all other layers

// Brings the layer to the bottom of all overlays.

// Brings the layer to the bottom of all path layers.

// Brings the layer to the top of all overlays.

// Brings the layer to the top of all path layers.

// Brings the tile layer to the bottom of all tile layers.

// Brings the tile layer to the top of all tile layers.

// Brings this overlay in front of other overlays (in the same map pane).

// Brings this overlay to the back of other overlays (in the same map pane).

// Bugfix issue 2318: Should remove all old layers before readding new ones

// But that's a pretty big refactor to the current test suite so going to

// By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.

// By default this means longitude is wrapped around the dateline so its

// By default this means the center longitude is wrapped around the dateline so its

// By default, a smooth zoom animation (during a [touch zoom](#map-touchzoom) or a [`flyTo()`](#map-flyto)) will update grid layers every integer zoom level. Setting this option to `false` will update the grid layer only when the smooth animation ends.

// By default, all `Path`s are rendered in a `SVG` renderer.

// By default, assume that the first argument is a string. This allows us to use

// By default, it sorts layers alphabetically by their name.

// By default, marker images zIndex is set automatically based on its latitude. Use this option if you want to put the marker on top of all others (or below), specifying a high value like `1000` (or high negative value, respectively).

// By default, the zoom level snaps to the nearest integer; lower values

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread2.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js

// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: ./node_modules/@emailjs/browser/es/api/sendPost.js

// CONCATENATED MODULE: ./node_modules/@emailjs/browser/es/index.js

// CONCATENATED MODULE: ./node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js

// CONCATENATED MODULE: ./node_modules/@emailjs/browser/es/store/store.js

// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/emotion-memoize.esm.js

// CONCATENATED MODULE: ./node_modules/@emotion/stylis/dist/stylis.browser.esm.js

// CONCATENATED MODULE: ./node_modules/@react-leaflet/core/lib/attribution.js

// CONCATENATED MODULE: ./node_modules/@react-leaflet/core/lib/component.js

// CONCATENATED MODULE: ./node_modules/@react-leaflet/core/lib/div-overlay.js

// CONCATENATED MODULE: ./node_modules/@react-leaflet/core/lib/element.js

// CONCATENATED MODULE: ./node_modules/@react-leaflet/core/lib/events.js

// CONCATENATED MODULE: ./node_modules/@react-leaflet/core/lib/grid-layer.js

// CONCATENATED MODULE: ./node_modules/@react-leaflet/core/lib/layer.js

// CONCATENATED MODULE: ./node_modules/@react-leaflet/core/lib/pane.js

// CONCATENATED MODULE: ./node_modules/dom7/dom7.esm.js

// CONCATENATED MODULE: ./node_modules/formik/dist/formik.esm.js

// CONCATENATED MODULE: ./node_modules/immer/dist/immer.esm.mjs

// CONCATENATED MODULE: ./node_modules/lodash-es/_Hash.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_ListCache.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_MapCache.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_Stack.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayEach.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayFilter.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayMap.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayPush.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_assocIndexOf.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssign.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssignIn.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssignValue.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetAllKeys.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseTimes.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_baseUnary.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneArrayBuffer.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneDataView.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneTypedArray.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_copyArray.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_copyObject.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_copySymbols.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_copySymbolsIn.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeys.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeysIn.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_getMapData.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_getNative.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_getValue.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_hashClear.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_hashDelete.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneObject.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_isKeyable.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheClear.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheGet.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheHas.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheSet.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheClear.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheDelete.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheGet.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheHas.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheSet.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_nativeKeysIn.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_overArg.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_stackClear.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_stackDelete.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_stackGet.js

// CONCATENATED MODULE: ./node_modules/lodash-es/_stackHas.js

// CONCATENATED MODULE: ./node_modules/lodash-es/eq.js

// CONCATENATED MODULE: ./node_modules/lodash-es/isArrayLike.js

// CONCATENATED MODULE: ./node_modules/lodash-es/isObject.js

// CONCATENATED MODULE: ./node_modules/lodash-es/isObjectLike.js

// CONCATENATED MODULE: ./node_modules/lodash-es/keys.js

// CONCATENATED MODULE: ./node_modules/lodash-es/keysIn.js

// CONCATENATED MODULE: ./node_modules/lodash-es/stubArray.js

// CONCATENATED MODULE: ./node_modules/lodash-es/stubFalse.js

// CONCATENATED MODULE: ./node_modules/lodash-es/toPath.js

// CONCATENATED MODULE: ./node_modules/lodash-es/toString.js

// CONCATENATED MODULE: ./node_modules/react-leaflet/lib/MapContainer.js

// CONCATENATED MODULE: ./node_modules/react-leaflet/lib/TileLayer.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Context.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/components/Provider.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useDispatch.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useReduxContext.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useSelector.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/hooks/useStore.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/index.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/Subscription.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/batch.js

// CONCATENATED MODULE: ./node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js

// CONCATENATED MODULE: ./node_modules/redux-thunk/es/index.js

// CONCATENATED MODULE: ./node_modules/redux/es/redux.js

// CONCATENATED MODULE: ./node_modules/ssr-window/ssr-window.esm.js

// CONCATENATED MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js

// CONCATENATED MODULE: ./node_modules/swiper/components-shared/get-changed-params.js

// CONCATENATED MODULE: ./node_modules/swiper/components-shared/get-params.js

// CONCATENATED MODULE: ./node_modules/swiper/components-shared/mount-swiper.js

// CONCATENATED MODULE: ./node_modules/swiper/components-shared/params-list.js

// CONCATENATED MODULE: ./node_modules/swiper/components-shared/update-swiper.js

// CONCATENATED MODULE: ./node_modules/swiper/components-shared/utils.js

// CONCATENATED MODULE: ./node_modules/swiper/core/breakpoints/getBreakpoint.js

// CONCATENATED MODULE: ./node_modules/swiper/core/breakpoints/index.js

// CONCATENATED MODULE: ./node_modules/swiper/core/breakpoints/setBreakpoint.js

// CONCATENATED MODULE: ./node_modules/swiper/core/check-overflow/index.js

// CONCATENATED MODULE: ./node_modules/swiper/core/classes/addClasses.js

// CONCATENATED MODULE: ./node_modules/swiper/core/classes/index.js

// CONCATENATED MODULE: ./node_modules/swiper/core/classes/removeClasses.js

// CONCATENATED MODULE: ./node_modules/swiper/core/core.js

// CONCATENATED MODULE: ./node_modules/swiper/core/events-emitter.js

// CONCATENATED MODULE: ./node_modules/swiper/core/events/index.js

// CONCATENATED MODULE: ./node_modules/swiper/core/events/onClick.js

// CONCATENATED MODULE: ./node_modules/swiper/core/events/onResize.js

// CONCATENATED MODULE: ./node_modules/swiper/core/events/onScroll.js

// CONCATENATED MODULE: ./node_modules/swiper/core/events/onTouchEnd.js

// CONCATENATED MODULE: ./node_modules/swiper/core/events/onTouchMove.js

// CONCATENATED MODULE: ./node_modules/swiper/core/events/onTouchStart.js

// CONCATENATED MODULE: ./node_modules/swiper/core/grab-cursor/setGrabCursor.js

// CONCATENATED MODULE: ./node_modules/swiper/core/grab-cursor/unsetGrabCursor.js

// CONCATENATED MODULE: ./node_modules/swiper/core/images/loadImage.js

// CONCATENATED MODULE: ./node_modules/swiper/core/images/preloadImages.js

// CONCATENATED MODULE: ./node_modules/swiper/core/loop/index.js

// CONCATENATED MODULE: ./node_modules/swiper/core/loop/loopCreate.js

// CONCATENATED MODULE: ./node_modules/swiper/core/loop/loopDestroy.js

// CONCATENATED MODULE: ./node_modules/swiper/core/loop/loopFix.js

// CONCATENATED MODULE: ./node_modules/swiper/core/moduleExtendParams.js

// CONCATENATED MODULE: ./node_modules/swiper/core/modules/observer/observer.js

// CONCATENATED MODULE: ./node_modules/swiper/core/modules/resize/resize.js

// CONCATENATED MODULE: ./node_modules/swiper/core/slide/index.js

// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideNext.js

// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slidePrev.js

// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideReset.js

// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideTo.js

// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideToClickedSlide.js

// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideToClosest.js

// CONCATENATED MODULE: ./node_modules/swiper/core/slide/slideToLoop.js

// CONCATENATED MODULE: ./node_modules/swiper/core/transition/setTransition.js

// CONCATENATED MODULE: ./node_modules/swiper/core/transition/transitionEmit.js

// CONCATENATED MODULE: ./node_modules/swiper/core/transition/transitionEnd.js

// CONCATENATED MODULE: ./node_modules/swiper/core/transition/transitionStart.js

// CONCATENATED MODULE: ./node_modules/swiper/core/translate/getTranslate.js

// CONCATENATED MODULE: ./node_modules/swiper/core/translate/index.js

// CONCATENATED MODULE: ./node_modules/swiper/core/translate/maxTranslate.js

// CONCATENATED MODULE: ./node_modules/swiper/core/translate/minTranslate.js

// CONCATENATED MODULE: ./node_modules/swiper/core/translate/setTranslate.js

// CONCATENATED MODULE: ./node_modules/swiper/core/translate/translateTo.js

// CONCATENATED MODULE: ./node_modules/swiper/core/update/index.js

// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateActiveIndex.js

// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateAutoHeight.js

// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateClickedSlide.js

// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateProgress.js

// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateSize.js

// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateSlides.js

// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateSlidesClasses.js

// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateSlidesOffset.js

// CONCATENATED MODULE: ./node_modules/swiper/core/update/updateSlidesProgress.js

// CONCATENATED MODULE: ./node_modules/swiper/modules/a11y/a11y.js

// CONCATENATED MODULE: ./node_modules/swiper/modules/navigation/navigation.js

// CONCATENATED MODULE: ./node_modules/swiper/react/context.js

// CONCATENATED MODULE: ./node_modules/swiper/react/get-children.js

// CONCATENATED MODULE: ./node_modules/swiper/react/loop.js

// CONCATENATED MODULE: ./node_modules/swiper/react/swiper-react.js

// CONCATENATED MODULE: ./node_modules/swiper/react/swiper-slide.js

// CONCATENATED MODULE: ./node_modules/swiper/react/swiper.js

// CONCATENATED MODULE: ./node_modules/swiper/react/use-isomorphic-layout-effect.js

// CONCATENATED MODULE: ./node_modules/swiper/react/virtual.js

// CONCATENATED MODULE: ./node_modules/swiper/shared/calc-looped-slides.js

// CONCATENATED MODULE: ./node_modules/swiper/shared/classes-to-selector.js

// CONCATENATED MODULE: ./node_modules/swiper/shared/create-element-if-not-defined.js

// CONCATENATED MODULE: ./node_modules/swiper/shared/dom.js

// CONCATENATED MODULE: ./node_modules/swiper/shared/get-support.js

// CONCATENATED MODULE: ./node_modules/swiper/shared/utils.js

// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/rng.js

// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/stringify.js

// CONCATENATED MODULE: ./node_modules/uuid/dist/esm-browser/v4.js

// CONCATENATED MODULE: ./node_modules/yup/es/Condition.js

// CONCATENATED MODULE: ./node_modules/yup/es/Reference.js

// CONCATENATED MODULE: ./node_modules/yup/es/ValidationError.js

// CONCATENATED MODULE: ./node_modules/yup/es/date.js

// CONCATENATED MODULE: ./node_modules/yup/es/locale.js

// CONCATENATED MODULE: ./node_modules/yup/es/mixed.js

// CONCATENATED MODULE: ./node_modules/yup/es/object.js

// CONCATENATED MODULE: ./node_modules/yup/es/schema.js

// CONCATENATED MODULE: ./node_modules/yup/es/string.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/ReferenceSet.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/createValidation.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/isodate.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/printValue.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/sortByKeyOrder.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/sortFields.js

// CONCATENATED MODULE: ./node_modules/yup/es/util/toArray.js

// CONCATENATED MODULE: ./src/components/common/Map/styled.ts

// CONCATENATED MODULE: ./src/components/forms/validationSchema.ts

// CONCATENATED MODULE: ./src/enums/routes.ts

// CONCATENATED MODULE: ./src/store/slices/initialState/index.tsx

// CRS's `wrapLat` and `wrapLng` properties, if they are outside the CRS's bounds.

// CRS's bounds.

// Cache the scale, so that we can continuously compensate for it during drag (_onMove).

// Calc slides

// Callbacks

// Called internally when the icon has to be shown, returns a `<img>` HTML element

// Called only internally, must be overridden by classes extending `GridLayer`.

// Called only internally, overrides GridLayer's [`createTile()`](#gridlayer-createtile)

// Called only internally, returns the URL for a tile given its coordinates.

// Called when the handler is disabled, should remove the event hooks added previously.

// Called when the handler is enabled, should add event hooks.

// Calls `methodName` on every layer contained in this group, passing any

// Calls `setZIndex` on every layer contained in this group, passing the z-index.

// Can use a custom [`coordsToLatLng`](#geojson-coordstolatlng) function.

// Cancels a previous `requestAnimFrame`. See also [window.cancelAnimationFrame](https://developer.mozilla.org/docs/Web/API/window/cancelAnimationFrame).

// Cancels any pending http requests associated with the tile

// Cancels the effects of a previous [`L.DomUtil.disableImageDrag`](#domutil-disabletextselection).

// Cancels the effects of a previous [`L.DomUtil.disableTextSelection`](#domutil-disabletextselection).

// Cancels the effects of a previous [`L.DomUtil.preventOutline`]().

// Canvas obviously doesn't have mouse events for individual drawn objects,

// Caught a render error, provide it as a rejected promise

// Causes the layer to clear all the tiles and request them again.

// Changes styles of GeoJSON vector layers with the given style function.

// Changes the URL of the image.

// Changes the [opacity](#gridlayer-opacity) of the grid layer.

// Changes the [zIndex offset](#marker-zindexoffset) of the marker.

// Changes the [zIndex](#gridlayer-zindex) of the grid layer.

// Changes the [zIndex](#imageoverlay-zindex) of the image overlay.

// Changes the appearance of a Path based on the options in the `Path options` object.

// Changes the marker icon.

// Changes the marker position to the given point.

// Changes the opacity of the marker.

// Check for circular references and return its corresponding clone.

// Check for flat arrays required to ensure unbalanced arrays are correctly converted in recursion

// Check if module is in cache

// Check if the element is an SVGElementInstance and use the correspondingElement instead

// Check that cyclic values are equal.

// Checks if the map container size changed and updates the map if so —

// Children needs to return slot items

// Classes

// Classes extending `L.Layer` will inherit the following options:

// Classes extending `TileLayer` can override this function to provide custom tile URL naming schemes.

// Classes inheriting from `Handler` must implement the two following methods:

// Cleanup styles

// Clear the deferred resetState if it hasn't executed yet, otherwise it

// Clicks

// Clips the segment a to b by rectangular bounds with the

// Closes the overlay.

// Closes the popup bound to this layer if it is open.

// Closes the popup previously opened with [openPopup](#map-openpopup) (or the given one).

// Closes the tooltip bound to this layer if it is open.

// Closes the tooltip given as parameter.

// Coerce booleans to `1` or `0` and dates to milliseconds.

// Coerce regexes to strings and treat strings, primitives and objects,

// Collapse the control container if expanded.

// Comma-separated list of WMS styles.

// Compatibility polyfill for [Array.isArray](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray)

// Compatibility polyfill for [Array.prototype.indexOf](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf)

// Compatibility polyfill for [Object.create](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/create)

// Compatibility polyfill for [String.prototype.trim](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim)

// Compatibility polyfill for [`Event.composedPath()`](https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath).

// Compute incremental movement

// Computes the CSS scale currently applied on the element.

// Construct an array with all of the field validation functions

// Container

// Controls how much the map's zoom level will change after a

// Controls the presence of a close button in the popup.

// Converts an object into a parameter URL string, e.g. `{a: "foo", b: "bar"}`

// Coordinate Reference System to use for the WMS requests, defaults to

// Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`.

// Coordinates values are rounded with [`formatNum`](#util-formatnum) function.

// Copy bytes to buffer, if provided

// Create a layer group, optionally given an initial set of layers and an `options` object.

// Create a new module (and put it into the cache)

// Create loop

// Create the React context to use in the PayPal hosted fields provider

// Create the React context to use in the script provider component

// Creates a Bounds object from the given array of points.

// Creates a Bounds object from two corners coordinate pairs.

// Creates a Canvas renderer with the given options.

// Creates a GeoJSON layer. Optionally accepts an object in

// Creates a Point object with the given `x` and `y` coordinates. If optional `round` is set to true, rounds the `x` and `y` values.

// Creates a SVG renderer with the given options.

// Creates a `DivIcon` instance with the given options.

// Creates a `Draggable` object for moving `el` when you start dragging the `dragHandle` element (equals `el` itself by default).

// Creates a `LatLngBounds` object by defining two diagonally opposite corners of the rectangle.

// Creates a `LatLngBounds` object defined by the geographical points it contains. Very useful for zooming the map to fit a particular set of locations with [`fitBounds`](#map-fitbounds).

// Creates a `LatLng` object from an array of 2 numbers (longitude, latitude)

// Creates a `Layer` from a given GeoJSON feature. Can use a custom

// Creates a `Transformation` object with the given coefficients.

// Creates a layers control with the given layers. Base layers will be switched with radio buttons, while overlays will be switched with checkboxes. Note that all base layers should be passed in the base layers object, but only one should be added to the map during map instantiation.

// Creates a multidimensional array of `LatLng`s from a GeoJSON coordinates array.

// Creates a new [map pane](#map-pane) with the given name if it doesn't exist already,

// Creates a new instance of GridLayer with the supplied options.

// Creates a popup with the specified content and options and opens it in the given point on a map.

// Creates a tooltip with the specified content and options and open it.

// Creates a zoom control

// Creates an HTML element with `tagName`, sets its class to `className`, and optionally appends it to `container` element.

// Creates an attribution control.

// Creates an icon instance with the given options.

// Creates an object representing a geographical point with the given latitude and longitude (and optionally altitude).

// Cursor

// Custom HTML code to put inside the div element, empty by default. Alternatively,

// Custom class name set on an element. Only for SVG renderer.

// DCE check should happen before ReactDOM bundle executes so that

// DOM Node

// DOM event handling

// Data URI string containing a base64-encoded empty GIF image.

// Date

// Decreases the zoom of the map by `delta` ([`zoomDelta`](#map-zoomdelta) by default).

// Default to a dummy "batch" implementation that just runs the callback

// Defines the maximum size of a CSS translation transform. The default

// Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.

// Deprecated, backwards-compatibility only

// Destroy loop

// Destroys the map and clears all related event listeners.

// Detach emitter events

// Detach events

// DevTools can report bad minification during injection.

// DevTools shouldn't crash React, no matter what.

// Didn't get a promise - provide as a resolved promise

// Direction where to open the tooltip. Possible values are: `right`, `left`,

// Directions locks

// Disable locks on resize

// Disable polyline clipping.

// Disable swiper and hide navigation when container not overflow

// Disables the dragging ability

// Disables the handler

// Distance (in pixels to the left/right and to the top/bottom) of the

// Do not return fn from catch block so `e` can be garbage collected

// Do not use in new applications or plugins.

// Does `stopPropagation` and `preventDefault` at the same time.

// Don't bail if we have data router errors so we can render them in the

// Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.

// Don't trust window-geometry-based delta

// Double click zoom handler.

// Dramatically reduces the number of points in a polyline while retaining

// Duplicate to all looped slides

// ES6 Maps

// ES6 Set

// ES6 Sets

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js + 1 modules

// EXTERNAL MODULE: ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: ./node_modules/leaflet/dist/leaflet-src.js

// EXTERNAL MODULE: ./node_modules/lodash/has.js

// EXTERNAL MODULE: ./node_modules/lodash/mapValues.js

// EXTERNAL MODULE: ./node_modules/lodash/snakeCase.js

// EXTERNAL MODULE: ./node_modules/react-fast-compare/index.js

// EXTERNAL MODULE: ./node_modules/react-is/index.js

// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 13 modules

// EXTERNAL MODULE: ./node_modules/react-redux/node_modules/react-is/index.js

// EXTERNAL MODULE: ./node_modules/react-router/dist/index.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// EXTERNAL MODULE: ./node_modules/react/jsx-runtime.js

// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js

// EXTERNAL MODULE: ./node_modules/use-sync-external-store/shim/index.js

// EXTERNAL MODULE: ./node_modules/use-sync-external-store/shim/with-selector.js

// EXTERNAL MODULE: ./node_modules/uuid/dist/esm-browser/v4.js + 3 modules

// EXTERNAL MODULE: ./src/components/ContactsHelp/ContactsHelpItem/index.tsx + 1 modules

// EXTERNAL MODULE: ./src/constants/headerDropdown.ts

// EXTERNAL MODULE: ./src/constants/index.ts + 46 modules

// EXTERNAL MODULE: ./src/constants/socialMediaIcons.ts + 6 modules

// Each leading .. segment means "go up one route" instead of "go up one

// Effects

// Emit

// Enable batched updates in our subscriptions for use

// Enables simulation of `contextmenu` event, default is `true` for mobile Safari.

// Enables the dragging ability

// Enables the handler

// Ensure the pathname has a trailing slash if the original "to" had one

// Equivalent of setting both top left and bottom right autopan padding to the same value.

// Errors can safely be ignored since this is only a browser support test.

// Events from pointing devices without precise scrolling are mapped to

// Every map has the following default panes that differ only in zIndex.

// Execute the module function

// Exit early for strings to avoid a performance hit in some environments.

// Expand the control container if collapsed.

// Expects a plain object of the form `{x: Number, y: Number}` instead.

// Expects an array of the form `[Number, Number]` or `[Number, Number, Number]` instead.

// Expects an array of the form `[x, y]` instead.

// Expects an coefficients array of the form

// Expects an plain object of the form `{lat: Number, lng: Number}` or `{lat: Number, lng: Number, alt: Number}` instead.

// Export object

// Exports

// Expose `MapCache`.

// Extend Swiper

// Extend defaults with modules params

// Extend defaults with passed params

// Extend the bounds to contain the given bounds

// Extend the bounds to contain the given point

// Extends the bounds to contain the given point.

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

// Fill color. Defaults to the value of the [`color`](#path-color) option

// Fill opacity.

// Find Wrapper

// Find current slide

// Find current slide size

// Find el

// Find new height from highest slide in view

// Find slides currently in view

// Find the layer the event is propagating from and its parents.

// Finds the closest parent node which size (width and height) is not null.

// Finish dragging to avoid conflict with touchZoom

// Fire a synthetic 'preclick' event which propagates up (mainly for closing popups).

// Fired at least once per zoom animation. For continuous zoom, like pinch zooming, fired once per frame during zoom.

// Fired before mouse click on the map (sometimes useful when you

// Fired continuously during dragging *before* each corresponding

// Fired continuously during dragging.

// Fired continuously during the animation.

// Fired repeatedly during any change in zoom level,

// Fired repeatedly during any movement of the map,

// Fired repeatedly while the user drags the marker.

// Fired when a drag is about to start.

// Fired when a drag starts

// Fired when a popup bound to this layer is closed

// Fired when a popup bound to this layer is opened

// Fired when a popup in the map is closed

// Fired when a popup is opened in the map

// Fired when a tile is removed (e.g. when a tile goes off the screen).

// Fired when a tile is requested and starts loading.

// Fired when a tile loads.

// Fired when a tile was loading but is now not wanted.

// Fired when a tooltip bound to this layer is closed.

// Fired when a tooltip bound to this layer is opened.

// Fired when a tooltip in the map is closed.

// Fired when a tooltip is opened in the map.

// Fired when an overlay is deselected through the [layers control](#control-layers).

// Fired when an overlay is selected through the [layers control](#control-layers).

// Fired when geolocation (using the [`locate`](#map-locate) method)

// Fired when geolocation (using the [`locate`](#map-locate) method) failed.

// Fired when the ImageOverlay layer fails to load its image

// Fired when the ImageOverlay layer has loaded its image

// Fired when the animation ends.

// Fired when the animation starts

// Fired when the base layer is changed through the [layers control](#control-layers).

// Fired when the center of the map stops changing

// Fired when the content of the overlay is updated

// Fired when the drag ends.

// Fired when the grid layer loaded all visible tiles.

// Fired when the grid layer starts loading tiles.

// Fired when the map is destroyed with [remove](#map-remove) method.

// Fired when the map is initialized (when its center and zoom are set

// Fired when the map needs to redraw its content (this usually happens

// Fired when the map starts autopanning when opening a popup.

// Fired when the map zoom changed, after any animations.

// Fired when the map zoom is about to change (e.g. before zoom animation).

// Fired when the marker is moved via [`setLatLng`](#circlemarker-setlatlng). Old and new coordinates are included in event arguments as `oldLatLng`, `latlng`.

// Fired when the marker is moved via [`setLatLng`](#marker-setlatlng) or by [dragging](#marker-dragging). Old and new coordinates are included in event arguments as `oldLatLng`, `latlng`.

// Fired when the marker starts moving (because of dragging).

// Fired when the marker stops moving (because of dragging).

// Fired when the mouse enters the map.

// Fired when the mouse leaves the map.

// Fired when the number of zoomlevels on the map is changed due

// Fired when the user clicks (or taps) the map.

// Fired when the user double-clicks (or double-taps) the map.

// Fired when the user presses a key from the keyboard that produces a character value while the map is focused.

// Fired when the user presses a key from the keyboard while the map is focused. Unlike the `keypress` event,

// Fired when the user pushes the mouse button on the map.

// Fired when the user pushes the right mouse button on the map, prevents

// Fired when the user releases a key from the keyboard while the map is focused.

// Fired when the user releases the mouse button on the map.

// Fired when the user starts dragging the marker.

// Fired when the user stops dragging the marker.

// Fired when the video has finished loading the first frame

// Fired when the view of the map starts changing (e.g. user starts dragging the map).

// Fired when there is an error loading a tile.

// Fired while the mouse moves over the map.

// Fires an event of the specified type. You can optionally provide a data

// Fix For Negative Oversliding

// Fix For Positive Oversliding

// Flag the module as loaded

// Flag to prevent _updateOpacity from pruning tiles during

// For example, a ratio of 0.5 extends the bounds by 50% in each direction.

// For https://github.com/Leaflet/Leaflet/issues/3332

// For non-path layers, we toggle the popup when clicking

// For old IE

// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>

// Forces the map's zoom level to always be a multiple of this, particularly

// Form elements to match

// Freeze the UI by throwing a never resolved promise

// Generates a SVG path string for multiple rings, with each ring turning

// Get attr

// Get breakpoint for window width and update parameters

// Get delta from pinch to center, so centerLatLng is delta applied to initial pinchLatLng

// Get real index

// Get the bounds that this ImageOverlay covers

// Gets normalized mouse position from a DOM event relative to the

// Gets normalized wheel delta from a wheel DOM event, in vertical

// Given a MouseEvent object, returns geographical coordinate where the

// Given a MouseEvent object, returns the pixel coordinate relative to

// Given a MouseEvent object, returns the pixel coordinate relative to the

// Given a geographical coordinate, returns the corresponding pixel coordinate

// Given a pixel coordinate relative to the [origin pixel](#map-getpixelorigin),

// Given a pixel coordinate relative to the map container, returns

// Given a pixel coordinate relative to the map container, returns the corresponding

// Given a projected coordinate returns the corresponding LatLng.

// Goes through the array of style names and returns the first name

// Grab Cursor

// GridLayer will only be displayed once at low zoom levels. Has no

// Has a `L.bind()` shortcut.

// Has an `L.throttle` shortcut.

// Helps from preventing layer control flicker when checkboxes are disabled

// Hide base layers section if there's only one layer.

// How many scroll pixels (as reported by [L.DomEvent.getWheelDelta](#domevent-getwheeldelta))

// How much to extend the click tolerance around a path/object on the map.

// How much to extend the clip area around the map view (relative to its size)

// How much to simplify the polyline on each zoom level. More means

// IE and Edge do not give the <use> element, so fetch it

// IE doesn't inherit filter opacity properly, so we're forced to set it on tiles

// IE10 specific: MsTouch needs preventDefault. See #2000

// IE7 bugs out if you create a radio dynamically, so you have to do it this hacky way (see https://stackoverflow.com/a/119079)

// IE8

// Icon instance to use for rendering the marker.

// If `latlng` is already within the (optionally padded) display bounds,

// If `layer` is omitted, the style of all features in the current layer is reset.

// If `maxBounds` is set, this option will control how solid the bounds

// If `options.debounceMoveend` is `true`, it will delay `moveend` event so

// If `true` and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution.

// If `true`, WMS request parameter keys will be uppercase.

// If `true`, inverses Y axis numbering for tiles (turn this on for [TMS](https://en.wikipedia.org/wiki/Tile_Map_Service) services).

// If `true`, the WMS service will return images with transparency.

// If `true`, the base layers in the control will be hidden when there is only one.

// If `true`, the control will assign zIndexes in increasing order to all of its layers so that the order is preserved when switching them on/off.

// If `true`, the control will be collapsed into an icon and expanded on mouse hover, touch, or keyboard activation.

// If `true`, the image overlay will emit [mouse events](#interactive-layer) when clicked or hovered.

// If `true`, the marker will get on top of others when you hover the mouse over it.

// If `zoom` is omitted, the map's current zoom level is used.

// If a String is provided, all tiles will have their crossOrigin attribute set to the String provided. This is needed if you want to access tile pixel data.

// If a String is provided, all tiles will have their referrerPolicy attribute set to the String provided.

// If a String is provided, the image will have its crossOrigin attribute set to the String provided. This is needed if you want to access image pixel data.

// If a pathname is explicitly provided in `to`, it should be relative to the

// If any custom options not documented here are used, they will be sent to the

// If enabled, panning of the map will have an inertia effect where

// If not specified and at least one `GridLayer` or `TileLayer` is in the map,

// If not specified, a common instance of `L.Icon.Default` is used.

// If offset is less than a pixel, ignore.

// If our path is non-empty and contains anything beyond an initial slash,

// If set to true, the zoom number used in tile URLs will be reversed (`maxZoom - zoom` instead of `zoom`)

// If set, creates a scrollable container of the given height

// If set, tiles will only be loaded inside the set `LatLngBounds`.

// If the URL does not change, the layer will not be redrawn unless

// If the URL hasn't changed, a regular <a> will do a replace instead of

// If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values

// If the checkbox was unchecked and the value is in the array, remove the value and return the array

// If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values

// If the current value is already an array, use it

// If the current value was a boolean, return a boolean

// If the currentValue was not a boolean we want to return an array

// If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),

// If the path array has a single element, the loop did not run.

// If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle

// If there are more ".." segments than parent routes, resolve relative to

// If this "action" is really a function, call it and return the result.

// If this was a render error, we put it in a RouteError context inside

// If true, the coordinate space will be unbounded (infinite in both axes)

// If true, the popup/tooltip will listen to the mouse events.

// If true, the tooltip will follow the mouse instead of being fixed at the feature center.

// If two routes are siblings, we should try to match the earlier sibling

// If url is already wrapped in quotes, remove them

// If we can, persist the event

// If we don't do that, calling `Object.keys(new Error())` yields an

// If we have data errors, trim matches to the highest error boundary

// If we pan too far, Chrome gets issues with tiles

// If we're currently dragging this draggable,

// If we're not changing locations, preserve the location but still surface

// If we're operating within a basename, prepend it to the pathname prior

// Ignore dash array containing invalid lengths

// Ignore everything but left clicks

// Ignore non-elements. This allows people to more easily inline

// Ignore non-index properties.

// Ignore the event if disabled; this happens in IE11

// Images

// Improves rendering performance dramatically by lessening the number of points to draw.

// In case an error was thrown and passed to the resolved Promise,

// In case of Leaflet event.

// In order to keep array values consistent for both dot path  and

// Increases the zoom of the map by `delta` ([`zoomDelta`](#map-zoomdelta) by default).

// Indexes

// Init

// Init Flag

// Initial empty states // objects

// Initial geographic center of the map

// Initial map zoom level

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of

// Inlined version of the `symbol-observable` polyfill

// Inspired by John Resig, Dean Edwards and YUI addEvent implementations.

// Instantiates a Marker object given a geographical point and optionally an options object.

// Instantiates a Transformation object with the given coefficients.

// Instantiates a WMS tile layer object given a base URL of the WMS service and a WMS parameters/options object.

// Instantiates a `Popup` object given `latlng` where the popup will open and an optional `options` object that describes its appearance and location.

// Instantiates a `Popup` object given an optional `options` object that describes its appearance and location and an optional `source` object that is used to tag the popup with a reference to the Layer to which it refers.

// Instantiates a `Tooltip` object given `latlng` where the tooltip will open and an optional `options` object that describes its appearance and location.

// Instantiates a `Tooltip` object given an optional `options` object that describes its appearance and location and an optional `source` object that is used to tag the tooltip with a reference to the Layer to which it refers.

// Instantiates a circle marker object given a geographical point, and an optional options object.

// Instantiates a circle object given a geographical point, and an options object

// Instantiates a map object given an instance of a `<div>` HTML element

// Instantiates a map object given the DOM ID of a `<div>` element

// Instantiates a polyline object given an array of geographical points and

// Instantiates a tile layer object given a `URL template` and optionally an options object.

// Instantiates an image overlay object given an SVG element and the geographical bounds it is tied to.

// Instantiates an image overlay object given the URL of the video (or array of URLs, or even a video element) and the

// Intentionally not using named imports because Rollup uses dynamic

// Internals

// Invalid dates are coerced to `NaN`.

// Inverse of [`project`](#map-project).

// Inverse of `scale()`, returns the zoom level corresponding to a scale

// Inverse of `scaleBy`. Divide each coordinate of the current point by

// It seems that in all such cases `detail` property of `click` event is always `1`.

// Iterates over the layers of the group, optionally specifying context of the iterator function.

// JSONP chunk loading for javascript

// Keep the root "" segment so the pathname starts at /

// Keyboard navigation handler.

// Knowing that the converted `index` is a valid number,

// L.DomEvent.on(div, 'click', function (ev) {

// Last click time

// Last unique ID used by [`stamp()`](#util-stamp)

// Latest Chrome and webkits Fix

// Latin Extended-A block.

// Latin-1 Supplement block.

// Latitude in degrees

// Layers extending `GridLayer` shall reimplement the following method.

// Layers extending `TileLayer` might reimplement the following method.

// Legacy IE pixels

// Legacy Moz lines

// Legacy Moz pages

// Legacy `process.binding('util')` for Node.js < 10.

// Less memory footprint.

// Like `wrapLng`, but for the latitude (vertical) axis.

// Limits the rate at which a wheel can fire (in milliseconds). By default

// Lines

// Listen for breakpoints change

// Live events

// Load new tiles only when panning ends.

// Locks

// Long tap handler to simulate `contextmenu` event (useful in mobile Safari).

// Long touches

// Longitude in degrees

// Make sure to assign internal flags at the beginning,

// Makes `el` the first child of its parent, so it renders behind the other children.

// Makes `el` the last child of its parent, so it renders in front of the other children.

// Makes the [outline](https://developer.mozilla.org/docs/Web/CSS/outline)

// Makes the map focusable and allows users to navigate the map with keyboard

// Map dragging handler (by both mouse and touch).

// Map properties include interaction handlers that allow you to control

// Matches logic in React's `shared/ExecutionEnvironment` file

// Max speed of the inertial movement, in pixels/second.

// Max width of the popup, in pixels.

// Maximum width of the control in pixels. The width is set dynamically to show round values (e.g. 100, 200, 500).

// Maximum zoom level of the map.

// Maximum zoom number the tile source has available. If it is specified,

// Mean Earth Radius, as recommended for use by

// Merges an object with the new parameters and re-requests tiles on the current screen (unless `noRedraw` was set to true).

// Merges the given properties to the `options` of the `obj` object, returning the resulting options. See `Class options`. Has an `L.setOptions` shortcut.

// Merges the properties of the `src` object (or multiple objects) into `dest` object and returns the latter. Has an `L.extend` shortcut.

// Min width of the popup, in pixels.

// Minimum zoom level of the map.

// Minimum zoom number the tile source has available. If it is specified,

// Mobile browsers will play the video right where it is instead of open it up in fullscreen mode.

// Modified from https://stackoverflow.com/questions/54520554/custom-element-getrootnode-closest-function-crossing-multiple-parent-shadowd

// Module

// Most browsers handle double tap natively

// Multiply each coordinate of the current point by each coordinate of

// NEW

// NS

// Navigation

// Needed by the `Canvas` renderer for interactivity

// Needs DomEvent.Pointer.js

// Negative values will retract the bounds.

// Next Slide

// No errorElement, throw to the nearest route-level error boundary

// No support

// Node.js 0.10 has enumerable non-index properties on buffers.

// Non `Object` object instances with different constructors are not equal.

// Normalize GeoJSON geometries/features into GeoJSON features.

// Normalize slideIndex

// Normalizes the [tileSize option](#gridlayer-tilesize) into a point. Used by the `createTile()` method.

// Note that if you passed a custom context to on, you must pass the same

// Note that, if your page doesn't use HTTPS, this method will fail in

// Note: Be careful editing this code!  It's been tuned for performance

// Null/undefined/functions/etc

// Number of pixels the map should pan by.

// Object

// Observe container

// Observe wrapper

// Obsolete way of instantiating a circle, for compatibility with 0.7.x code.

// On some browsers autoplay will only work with `muted: true`

// On some platforms the browser doesn't fire native dblclicks for touch events.

// Only accepts actual `L.LatLngBounds` instances, not arrays.

// Only accepts actual `L.Point` instances, not arrays.

// Only data routers handle errors

// Only flip isValidating if the function is async.

// Only wrap in an error boundary within data router usages when we have an

// Opacity of the tiles. Can be used in the `createTile()` function.

// Opens or closes the overlay bound to layer depending on its current state.

// Opens or closes the popup bound to this layer depending on its current state.

// Opens or closes the tooltip bound to this layer depending on its current state.

// Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.

// Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.

// Opens the specified popup while closing the previously opened (to make sure only one is opened at one time for usability).

// Opens the specified tooltip.

// Option inherited from "Interactive layer" abstract class

// Optional offset of the tooltip position.

// Optional relative position of the background, in pixels

// Otherwise look for errors from our data router state

// Otherwise, it doesn't really make sense to rank non-siblings by index,

// Otherwise, pass the action down the middleware chain as usual

// Our types know better, but runtime JS may not!

// Overrides

// Pages

// Pagination

// Pane for `GridLayer`s and `TileLayer`s

// Pane for `Icon`s of `Marker`s

// Pane for `Popup`s.

// Pane for `Tooltip`s.

// Pane for overlay shadows (e.g. `Marker` shadows)

// Pane for vectors (`Path`s, like `Polyline`s and `Polygon`s), `ImageOverlay`s and `VideoOverlay`s

// Pane that contains all other map panes

// Panes are DOM elements used to control the ordering of layers on the map. You

// Pans the map by a given number of pixels (animated).

// Pans the map the minimum amount to make the `latlng` visible. Use

// Pans the map to a given center.

// Pans the map to the closest view that would lie inside the given bounds (if it's not already), controlling the animation using the options specific, if any.

// Passive Listeners

// Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

// PhantomJS 2 has enumerable non-index properties on typed arrays.

// Pinch updates GridLayers' levels only when zoomSnap is off, so zoomSnap becomes noUpdate.

// Pixels

// Polygon is so small that all points are on same pixel.

// Postpone to next JS tick so internal click event handling

// Precision limit of a 32-bit float

// Preserve trailing slashes on basename, so we can let the user control

// Prev Slide

// Prevent Links Clicks

// Prevent dragging multiple objects at once.

// Prevent firing click after you just dragged an object.

// Prevents the default action of the DOM Event `ev` from happening (such as

// Prevents the user from generating `selectstart` DOM events, usually generated

// Private method to load tiles in the grid's active zoom level according to map bounds

// Proceed with submit...

// Progress

// Projects a geographical coordinate `LatLng` according to the projection

// Projects geographical coordinates into coordinates in units accepted for

// Projects geographical coordinates into pixel coordinates for a given zoom.

// Props

// Provides a touch events wrapper for (ms)pointer events.

// RTL

// Radius of the circle marker, in pixels

// Ramer-Douglas-Peucker simplification, see https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm

// Raw (untracked) promise - track it

// React currently throws a warning when using useLayoutEffect on the server.

// React v16.11 and below

// React v16.12 and above

// Read-only in old browsers.

// Recursively compare arrays (susceptible to call stack limits).

// Recursively compare objects (susceptible to call stack limits).

// Recursively convert values (susceptible to call stack limits).

// Recursively populate clone (susceptible to call stack limits).

// Redraw the union of the layer's old pixel

// Redraw vectors since canvas is cleared upon removal,

// Redraws the layer. Sometimes useful after you changed the coordinates that the path uses.

// Redraws the rectangle with the passed bounds.

// Refer to [CORS Settings](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for valid String values.

// Refer to [HTMLImageElement.referrerPolicy](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy) for valid String values.

// RegExp

// Relevant for supported browsers. See [browser compatibility](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit)

// Remove any children before render it again

// Remove last grid elements depending on width

// Remove relevant pieces of `touched` and `errors` too!

// Remove the given layer from the control.

// Removes `el` from its parent element

// Removes `name` from the element's class attribute.

// Removes a previously added listener function.

// Removes a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`

// Removes all of `el`'s children elements from `el`

// Removes all previously added listeners from given HTMLElement

// Removes all previously added listeners of given types.

// Removes all the layers from the group.

// Removes an attribution text.

// Removes an event parent, so it will stop receiving propagated events

// Removes the control from the map it is currently active on.

// Removes the given control from the map

// Removes the given layer from the group.

// Removes the given layer from the map.

// Removes the layer from the given `LayerGroup`

// Removes the layer from the given map

// Removes the layer from the map it is currently active on.

// Removes the layer with the given internal ID from the group.

// Removes the popup previously bound with `bindPopup`.

// Removes the tooltip previously bound with `bindTooltip`.

// Render children with resolved value

// Render via our errorElement

// Renderer is set here because we need to call renderer.getEvents

// Replaces all the points in the polyline with the given array of geographical points.

// Resets the 3D CSS transform of `el` so it is translated by `offset` pixels

// Resets the given vector layer's style to the original GeoJSON style, useful for resetting style after hover events.

// Resistance

// Resize handler

// Restricts the map view to the given bounds (see the [maxBounds](#map-maxbounds) option).

// Retrocompat. Allow plugins to support Leaflet versions before and after 1.1.

// Return Grab Cursor

// Return app instance

// Return locks after resize

// Return original object if new value is the same as current

// Return the exports of the module

// Returns `true` if a particular event type has any listeners attached to it.

// Returns `true` if any tile in the grid layer has not finished loading.

// Returns `true` if both coordinates of the given point are less than the corresponding current point coordinates (in absolute values).

// Returns `true` if the Polyline has no LatLngs.

// Returns `true` if the bounds are properly initialized.

// Returns `true` if the element's class attribute contains `name`.

// Returns `true` if the given `LatLng` point is at the same position (within a small margin of error). The margin of error can be overridden by setting `maxMargin` to a small number.

// Returns `true` if the given internal ID is currently added to the group.

// Returns `true` if the given layer is currently added to the group.

// Returns `true` if the given layer is currently added to the map

// Returns `true` if the given point has the same coordinates.

// Returns `true` if the handler is enabled

// Returns `true` if the popup bound to this layer is currently open.

// Returns `true` if the rectangle contains the given one.

// Returns `true` if the rectangle contains the given point.

// Returns `true` if the rectangle intersects the given bounds. Two bounds

// Returns `true` if the rectangle intersects the given bounds. Two bounds intersect if they have at least one point in common.

// Returns `true` if the rectangle is equivalent (within a small margin of error) to the given bounds. The margin of error can be overridden by setting `maxMargin` to a small number.

// Returns `true` if the rectangle is equivalent to the given bounds.

// Returns `true` if the rectangle overlaps the given bounds. Two bounds

// Returns `true` if the rectangle overlaps the given bounds. Two bounds overlap if their intersection is an area.

// Returns `true` if the tooltip bound to this layer is currently open.

// Returns `true` when the overlay is visible on the map.

// Returns a Javascript function that is a class constructor (to be called with `new`).

// Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the circle marker (as a GeoJSON `Point` Feature).

// Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the layer group (as a GeoJSON `FeatureCollection`, `GeometryCollection`, or `MultiPoint`).

// Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the marker (as a GeoJSON `Point` Feature).

// Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the polygon (as a GeoJSON `Polygon` or `MultiPolygon` Feature).

// Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the polyline (as a GeoJSON `LineString` or `MultiLineString` Feature).

// Returns a [map pane](#map-pane), given its name or its HTML element (its identity).

// Returns a `LatLngBounds` with the same size as the given one, ensuring

// Returns a `LatLngBounds` with the same size as the given one, ensuring that

// Returns a `LatLng` where `lat` and `lng` has been wrapped according to the

// Returns a `LatLng` where lat and lng has been wrapped according to the

// Returns a copy of the current point with ceiled coordinates (rounded up).

// Returns a copy of the current point with floored coordinates (rounded down).

// Returns a copy of the current point with rounded coordinates.

// Returns a copy of the current point with truncated coordinates (rounded towards zero).

// Returns a copy of the current point.

// Returns a function which always returns `false`.

// Returns a function which executes function `fn` with the given scope `context`

// Returns a instance of [SVGElement](https://developer.mozilla.org/docs/Web/API/SVGElement),

// Returns a new `LatLngBounds` object in which each boundary is `sizeInMeters/2` meters apart from the `LatLng`.

// Returns a new `LatLng` object with the longitude wrapped so it's always between -180 and +180 degrees.

// Returns a new function bound to the arguments passed, like [Function.prototype.bind](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).

// Returns a plain object containing the names of all [panes](#map-pane) as keys and

// Returns a string representation of the point (for debugging purposes).

// Returns a string representation of the point for debugging purposes.

// Returns a string with bounding box coordinates in a 'southwest_lng,southwest_lat,northeast_lng,northeast_lat' format. Useful for sending requests to web services that return geo data.

// Returns a transformed point, optionally multiplied by the given scale.

// Returns an array containing the `HTMLElement`s that the given DOM event

// Returns an array of all the layers added to the group.

// Returns an array of the points in the path, or nested arrays of points in case of multi-polyline.

// Returns an element given its DOM id, or returns the element itself

// Returns an object with `x` and `y` members as horizontal and vertical scales respectively,

// Returns bounds created by extending or retracting the current bounds by a given ratio in each direction.

// Returns the HTML container of the overlay.

// Returns the HTML element that contains the map.

// Returns the HTML element that contains the tiles for this layer.

// Returns the HTMLElement that contains the control.

// Returns the LatLngBounds of the Feature Group (created from bounds and coordinates of its children).

// Returns the `HTMLElement` corresponding to the given `coords`. If the `done` callback

// Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.

// Returns the `LatLngBounds` of the path.

// Returns the bottom-left point of the bounds.

// Returns the bottom-right point of the bounds (i.e. [`this.max`](#bounds-max)).

// Returns the bounds of the current map view in projected pixel

// Returns the cartesian distance between the current and the given points.

// Returns the center ([centroid](http://en.wikipedia.org/wiki/Centroid)) of the Polygon.

// Returns the center ([centroid](https://en.wikipedia.org/wiki/Centroid)) of the polyline.

// Returns the center of the ImageOverlay.

// Returns the center point of the bounds.

// Returns the closest point from a point `p` on a segment `p1` to `p2`.

// Returns the content of the overlay.

// Returns the coordinates of an element previously positioned with setPosition.

// Returns the current geographical position of the circle marker

// Returns the current geographical position of the marker.

// Returns the current icon used by the marker

// Returns the current radius of a circle. Units are in meters.

// Returns the current radius of the circle

// Returns the current size of the map container (in pixels).

// Returns the current zoom level of the map view

// Returns the distance (in meters) to the given `LatLng` calculated using the [Spherical Law of Cosines](https://en.wikipedia.org/wiki/Spherical_law_of_cosines).

// Returns the distance between point `p` and segment `p1` to `p2`.

// Returns the distance between two geographical coordinates according to

// Returns the distance between two geographical coordinates.

// Returns the east longitude of the bounds

// Returns the element's class.

// Returns the geographical bounds visible in the current map view

// Returns the geographical center of the map view

// Returns the geographical point of the overlay.

// Returns the instance of [`HTMLImageElement`](https://developer.mozilla.org/docs/Web/API/HTMLImageElement)

// Returns the instance of [`HTMLVideoElement`](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement)

// Returns the instance of [`SVGElement`](https://developer.mozilla.org/docs/Web/API/SVGElement)

// Returns the instance of `Renderer` that should be used to render the given

// Returns the internal ID for a layer

// Returns the layer with the given internal ID.

// Returns the maximum zoom level of the map (if set in the `maxZoom` option of the map or of any layers).

// Returns the maximum zoom level on which the given bounds fit to the map

// Returns the minimum zoom level of the map (if set in the `minZoom` option of the map or of any layers), or `0` by default.

// Returns the north latitude of the bounds

// Returns the north-east point of the bounds.

// Returns the north-west point of the bounds.

// Returns the number `num` modulo `range` in such a way so it lies within

// Returns the number `num` rounded with specified `precision`.

// Returns the point closest to `p` on the Polyline.

// Returns the popup bound to this layer.

// Returns the projected pixel coordinates of the top left point of

// Returns the projection's bounds scaled and transformed for the provided `zoom`.

// Returns the result of addition of the current and the given points.

// Returns the result of division of the current point by the given number.

// Returns the result of multiplication of the current point by the given number.

// Returns the result of subtraction of the given point from the current.

// Returns the reverse transformation of the given point, optionally divided

// Returns the scale factor to be applied to a map transition from zoom level

// Returns the scale used when transforming projected coordinates into

// Returns the size of the given bounds

// Returns the south latitude of the bounds

// Returns the south-east point of the bounds.

// Returns the south-west point of the bounds.

// Returns the tooltip bound to this layer.

// Returns the top-left point of the bounds (i.e. [`this.min`](#bounds-min)).

// Returns the top-right point of the bounds.

// Returns the unique ID of an object, assigning it one if it doesn't have it.

// Returns the value for a certain style attribute on an element,

// Returns the west longitude of the bounds

// Returns the world's bounds in pixel coordinates for zoom level `zoom`.

// Returns the zoom level that the map would end up at, if it is at `fromZoom`

// Returns true if `latlngs` is a flat array, false is nested.

// Reverse of [`coordsToLatLng`](#geojson-coordstolatlng)

// Reverse of [`coordsToLatLngs`](#geojson-coordstolatlngs)

// Round length

// Routes without a path shouldn't ever match by themselves unless they are

// Routing is relative to the current pathname if explicitly requested.

// Run an animation of a given element to a new position, optionally setting

// Runs the given function `fn` when the map gets initialized with

// SVG complains about empty path strings

// SVG does not have the concept of zIndex so we resort to changing the DOM order of elements

// SVG-related properties

// Safari 9 has enumerable `arguments.length` in strict mode.

// Sanity check: panic if the tile range contains Infinity somewhere.

// Save Dom lib

// Save locks

// Schedules `fn` to be executed when the browser repaints. `fn` is bound to

// Scroll wheel zoom handler.

// See [Icon documentation](#L.Icon) for details on how to customize the marker icon.

// See `Locate options` for more details.

// See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.

// See https://drafts.csswg.org/css-values-3/#urls

// See https://github.com/Leaflet/Leaflet/pull/7279

// Set Grab Cursor

// Set a flag so that a viewprereset+moveend+viewreset only updates&redraws once

// Set all removed listeners to noop

// Set attrs

// Set breakpoint

// Set form fields by name

// Set it if you want to override the default behavior of the popup closing when user clicks

// Set it to `false` if you don't want the map to do panning animation

// Set it to `false` if you want to override the default behavior of

// Set it to `true` if you want to prevent users from panning the popup

// Set it to false if you don't want the map to zoom beyond min/max zoom

// Set the opacity of an element (including old IE support).

// Set wrapper width

// Sets a map view that contains the given geographical bounds with the

// Sets a map view that mostly contains the whole world with the maximum

// Sets the HTML content of the overlay while initializing. If a function is passed the source layer will be

// Sets the HTML content of the overlay. If a function is passed the source layer will be passed to the function.

// Sets the content of the popup bound to this layer.

// Sets the content of the tooltip bound to this layer.

// Sets the element's class.

// Sets the geographical point where the overlay will open.

// Sets the given path options to each layer of the group that has a `setStyle` method.

// Sets the lower limit for the available zoom levels (see the [minZoom](#map-minzoom) option).

// Sets the opacity of the overlay.

// Sets the position of `el` to coordinates specified by `position`,

// Sets the position of a circle marker to a new location.

// Sets the position of the control.

// Sets the radius of a circle marker. Units are in pixels.

// Sets the radius of a circle. Units are in meters.

// Sets the upper limit for the available zoom levels (see the [maxZoom](#map-maxzoom) option).

// Sets the view of the map (geographical center and zoom) performing a smooth

// Sets the view of the map (geographical center and zoom) with the given

// Sets the view of the map with a smooth animation like [`flyTo`](#map-flyto),

// Sets the zoom of the map.

// Short swipes

// Should url be wrapped?

// Simple templating facility, accepts a template string of the form `'Hello {a}, {b}'`

// Simplify polyline with vertex reduction and Douglas-Peucker simplification.

// Skip horizontal/depth wheel events

// Skip index properties.

// Slide

// Slide To Initial Slide

// Slides

// Slides grid

// So here we rely on that fact to avoid excessive 'dblclick' simulation when not needed.

// Some old versions of Webkit choke when 'none' is passed; pass

// Special case to return head of iframe instead of iframe itself

// Squash nested feature collections

// Standard code name of the CRS passed into WMS services (e.g. `'EPSG:3857'`)

// Stop the given event from propagation to parent elements. Used inside the listener functions:

// Stops the animation (if currently running).

// Stops the currently running `panTo` or `flyTo` animation, if any.

// Stops watching location previously initiated by `map.locate({watch: true})`

// String

// String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

// Stroke color

// Stroke opacity

// Stroke width in pixels

// Subclasses are responsible of firing the 'update' event.

// Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings.

// Subtract paddings

// Supply a getter just to skip dealing with ESM bindings

// Swiper Instance

// Swiping/no swiping

// TODO Appropriate docs section?

// TODO International date line?

// TODO refactor to be able to adjust map pane position after zoom

// TODO refactor, move to CRS

// TODO replace with universal implementation after refactoring projections

// TODO ugly, refactor

// TODO: Can this as be avoided?

// TODO: Check semantics - isn't the pixel origin the 0,0 coord relative to

// TODO: This could be cleaned up.  push/replace should probably just take

// TODO: remove

// TODO: use _cast, this is double resolving

// Tab focus

// Tap, doubleTap, Click

// Tell paths to redraw themselves

// Test for A's keys different from B.

// Test for IE <= 9 as proposed by Browserhacks

// Tests for existence of standard globals is to allow style-loader

// Text for the `alt` attribute of the icon image.

// Text for the `alt` attribute of the image (useful for accessibility).

// Text for the browser tooltip that appear on marker hover (no tooltip by default).

// Thanks to John Resig and Dean Edwards for inspiration!

// The HTML text shown before the attributions. Pass `false` to disable.

// The JS SDK only loads the buttons component by default.

// The [Coordinate Reference System](#crs) to use. Don't change this if you're not

// The alt attribute is set to the empty string,

// The bottom right corner of the rectangle.

// The chunk loading function for additional chunks

// The current translate is before the current snap index, so the choice

// The current translate is on or after the current snap index, so the choice

// The default `precision` value is 6 decimal places.

// The default method for drawing vector layers on the map. `L.SVG`

// The default zoom control (only available if the

// The explicit [zIndex](https://developer.mozilla.org/docs/Web/CSS/CSS_Positioning/Understanding_z_index) of the overlay layer.

// The explicit zIndex of the tile layer.

// The function receives both the `L.Layer` instances and their names, as in

// The function should return a `String` or `HTMLElement` to be used in the overlay.

// The inverse of `latLngToPoint`. Projects pixel coordinates on a given

// The inverse of `project`.

// The line is so small in the current view that all points are on the same pixel.

// The margin between the popup and the bottom right corner of the map

// The margin between the popup and the top left corner of the map

// The max number of pixels a user can shift his finger during touch

// The max number of pixels a user can shift the mouse pointer during a click

// The maximum zoom level up to which this layer will be displayed (inclusive).

// The minimum zoom level down to which this layer will be displayed (inclusive).

// The module cache

// The observerUpdate event should only be triggered

// The offset of the overlay position.

// The offset of the popup position.

// The opacity of the image overlay.

// The opacity of the marker.

// The position of the control (one of the map corners). Possible values are `'topleft'`,

// The primary entry point assumes we're working with standard ReactDOM/RN, but

// The rate with which the inertial movement slows down, in pixels/second².

// The redraw will extend the redraw bounds

// The require function

// The scrollable container can be styled using the

// The text set on the 'zoom in' button.

// The text set on the 'zoom out' button.

// The thunk middleware looks for any functions that were passed to `store.dispatch`.

// The title set on the 'zoom in' button.

// The title set on the 'zoom out' button.

// The top left corner of the rectangle.

// The use of `Object#toString` avoids issues with the `typeof` operator

// The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.

// The z-index offset used for the `riseOnHover` feature.

// The zoom number used in tile URLs will be offset with this value.

// There are several static functions which can be called without instantiating L.GeoJSON:

// There are several static functions which can be called without instantiating L.SVG:

// Therefore there is no need to account for the position and border (they are eliminated by the subtraction)

// They are going to lose state here, but there is no real

// This action has a similiar effect to ActionTypes.INIT.

// This error is thrown as a convenience so you can more easily

// This file contains only the entry chunk.

// This function allow to reference async chunks

// This gives us a mechanism to recover from the error when the location changes.

// This ignores clicks on elements which are a label with a 'for'

// This is a legit error rejected by the onSubmit fn

// This is used to make sure we don't warn about the same

// This may be needed if your map's rendering context has a strict default but your tile provider expects a valid referrer

// This prevents unstable projections from getting into

// This will efficiently validate a single field by avoiding state

// This will throw an exception if access to iframe is blocked

// This would be fine in simple cases, but make it impossible to disable submit

// Threshold

// Throw to the suspense boundary

// Tiles will not update more than once every `updateInterval` milliseconds when panning.

// Time diff

// To get around it, we can conditionally useEffect on the server (no-op) and

// To respect sync submit fns, we can't simply wrap executeSubmit in a promise and

// To support iOS's swipe-to-go-back gesture (when being used in-app).

// Toggle navigation, pagination, scrollbar

// Tooltip container opacity.

// Touch Events

// Touch zoom handler.

// Touches

// Track how deep we got in our render pass to emulate SSR componentDidCatch

// Transparently support React.Fragment and its children.

// Tries to locate the user using the Geolocation API, firing a [`locationfound`](#map-locationfound)

// Trigger expand after Layers Control has been inserted into DOM so that is now has an actual height.

// Trims and splits the string on whitespace and returns the array of parts.

// UNUSED EXPORTS: BENEFIT_ICONS, FAQ_ITEMS, HEADER_DROPDOWN_ITEMS, MAP_MARKERS, NAV_ITEMS, SERVICES_ICONS, SOLUTIONS_ICONS, SOLUTION_SINGLE_ARTICLES, TEAM_ITEMS, TESTIMONIALS_ICONS

// UNUSED EXPORTS: ButtonVideo, Dropdown

// UNUSED EXPORTS: ReactReduxContext, batch, connect, createDispatchHook, createSelectorHook, createStoreHook, shallowEqual, useStore

// UNUSED EXPORTS: ServerStyleSheet, StyleSheetConsumer, StyleSheetContext, StyleSheetManager, ThemeConsumer, ThemeContext, __PRIVATE__, css, isStyledComponent, keyframes, useTheme, version, withTheme

// UNUSED EXPORTS: useAppDispatch

// URL segment".  This is a key difference from how <a href> works and a

// URL to the overlay image to show in place of the overlay that failed to load.

// URL to the tile image to show in place of the tile that failed to load.

// UTILS

// Unable to get source layer.

// Unique ID creation requires a high quality random # generator. In the browser we therefore

// Unique Navigation Elements

// Update Height

// Update Index

// Update Navigation Buttons

// Update active index in free mode

// Update first entry unless this is the

// Update last entry unless this is the

// Update pixel bounds of renderer container (for positioning/sizing/clipping later)

// Update progress

// Update size

// Update slides

// Update the bounds that this ImageOverlay covers

// Update translate

// Updates the layer's URL template and redraws it (unless `noRedraw` is set to `true`).

// Updates the overlay content, layout and position. Useful for updating the overlay after something inside changed, e.g. image loaded.

// Use `util.types` for Node.js 10+.

// Use it inside listener functions.

// Use this specific instance of `Renderer` for this path. Takes

// Used as a hack to free memory from unused images on WebKit-powered

// Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

// Used for a huge performance boost when processing/displaying Leaflet polylines for

// Values smaller than `1` (e.g. `0.5`) allow for greater granularity.

// Velocities

// Vendor-prefixed transform style name (e.g. `'webkitTransform'` for WebKit).

// Vendor-prefixed transition style name.

// Verify that the code above has been dead code eliminated (DCE'd).

// Version of the WMS service to use

// Vertical

// Virtual Translate

// Visible Slides

// WMS image format (use `'image/png'` for layers with transparency).

// WMS server as extra parameters in each request URL. This can be useful for

// Wait a bit more than 0.2 secs (the duration of the tile fade-in)

// We assume that the parent container's position, border and scale do not change for the duration of the drag.

// We default the action to "#" in case the preventDefault fails (just updates the URL hash)

// We need TypeScript generics on these, so we'll bind them in the constructor

// We need double the scroll pixels (see #7403 and #4538) for all Browsers

// We need to compute the pathnameBase here using the raw splat value

// We need to make sure we also remove relevant pieces of `touched` and `errors`

// We should still report in case we break this code.

// We want to leave trailing slash behavior in the user's control, so if they

// Welcome to debugging React Router!

// When `true`, a mouse event on this marker will trigger the same event on the map

// When `true`, a mouse event on this path will trigger the same event on the map

// When `true`, the map will pan whenever the marker is focused (via

// When a store is created, an "INIT" action is dispatched so that every

// When a user passes in a `locationArg`, the associated routes need to

// When clicking on an <input>, the browser generates a click on its

// When matching to the end, ignore trailing slashes

// When panning the map, keep this many rows and columns of tiles before unloading them.

// When this option is set, the map restricts the view to the given

// When using ES6 imports it could not be set when `Popup` was not imported as well

// When we get into an error state, the user will likely click "back" to the

// Where should we anchor the popup on the source layer?

// Where should we anchor the tooltip on the source layer?

// Whether `Path`s should be rendered on a `Canvas` renderer.

// Whether a [attribution control](#control-attribution) is added to the map by default.

// Whether a [zoom control](#control-zoom) is added to the map by default.

// Whether markers animate their zoom with the zoom animation, if disabled

// Whether the crossOrigin attribute will be added to the image.

// Whether the crossOrigin attribute will be added to the tiles.

// Whether the layer is wrapped around the antimeridian. If `true`, the

// Whether the map automatically handles browser window resize to update itself.

// Whether the map can be zoomed by touch-dragging with two fingers. If

// Whether the map can be zoomed by using the mouse wheel. If passed `'center'`,

// Whether the map can be zoomed in by double clicking on it and

// Whether the map can be zoomed to a rectangular area specified by

// Whether the map is draggable with mouse/touch or not.

// Whether the map zoom animation is enabled. By default it's enabled

// Whether the marker can be tabbed to with a keyboard and clicked by pressing enter.

// Whether the marker is draggable with mouse/touch or not.

// Whether the referrerPolicy attribute will be added to the tiles.

// Whether the tile fade animation is enabled. By default it's enabled

// Whether the video starts on mute when loaded.

// Whether the video starts playing automatically when loaded.

// Whether the video will loop back to the beginning when played.

// Whether the video will save aspect ratio after the projection.

// Whether to draw stroke along the path. Set it to `false` to disable borders on polygons or circles.

// Whether to fill the path with color. Set it to `false` to disable filling on polygons or circles.

// Whether to open the tooltip permanently or only on mouseover.

// Whether to pan the map when dragging this marker near its edge or not.

// Whether to show the imperial scale line (mi/ft).

// Whether to show the metric scale line (m/km).

// Whether to sort the layers. When `false`, layers will keep the order

// Whether we're in an error state or not, we update the location in state

// Width and height of tiles in the grid. Use a number if width and height are equal, or `L.point(width, height)` otherwise.

// With this option enabled, the map tracks when you pan to another "copy"

// Won't animate zoom if the zoom difference exceeds this value.

// Work around webkit not firing 'transitionend', see https://github.com/Leaflet/Leaflet/issues/3689, 2693

// Wrapper

// Yup will throw a validation error if validation fails. We catch those and

// Zooms the map while keeping a specified geographical point on the map

// Zooms the map while keeping a specified pixel on the map (relative to the top-left corner) stationary.

// [Cohen-Sutherland algorithm](https://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm)

// [Extends the current class](#class-inheritance) given the properties to be included.

// [GeoJSON format](https://tools.ietf.org/html/rfc7946) to display on the map

// [Includes a mixin](#class-includes) into the current class.

// [Merges `options`](#class-options) into the defaults of the class.

// [Ramer-Douglas-Peucker algorithm](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm).

// [Useful for accessibility](https://leafletjs.com/examples/accessibility/#markers-must-be-labelled).

// [`getZoomScale`](#map-getZoomScale).

// [`keepBuffer`](#gridlayer-keepbuffer) option in desktop browsers.

// [`map.createPane`](#map-createpane) method.

// [`map.getPanes`](#map-getpanes) methods. New panes can be created with the

// [`pointToLayer`](#geojson-pointtolayer) and/or [`coordsToLatLng`](#geojson-coordstolatlng)

// [`setMaxBounds`](#map-setmaxbounds) method.

// [`window.requestAnimationFrame`](https://developer.mozilla.org/docs/Web/API/window/requestAnimationFrame),

// [`zoomControl` option](#map-zoomcontrol) was `true` when creating the map).

// [`zoomIn()`](#map-zoomin), [`zoomOut()`](#map-zoomout), pressing `+`

// [non-standard vendor WMS parameters](https://docs.geoserver.org/stable/en/user/services/wms/vendor.html).

// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded

// [scaling matrix](https://en.wikipedia.org/wiki/Scaling_%28geometry%29#Matrix_representation)

// ^^^ Make sure Formik is still mounted before updating state

// _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.

// _update just loads more tiles. If the tile zoom level differs too much

// `'center'`, double-click zoom will zoom to the center of the

// `'mousedown'` and `'touchstart'` events (plus browser variants).

// `'topright'`, `'bottomleft'` or `'bottomright'`

// `('Hello foo, bar')`. You can also specify functions instead of strings for

// `0.5` by default).

// `256 * 2^zoom` for Mercator-based CRS.

// `Icon.Default` will try to auto-detect the location of the

// `Map pane` where the grid layer will be added.

// `Map pane` where the markers icon will be added.

// `Map pane` where the markers shadow will be added.

// `Map pane` where the overlay will be added.

// `Map pane` where the popup will be added.

// `Map pane` where the tooltip will be added.

// `Path`. It will ensure that the `renderer` options of the map and paths

// `Transformation`. The result is pixel coordinate relative to

// `[a: Number, b: Number, c: Number, d: Number]`.

// ```

// ```js

// `auto` will dynamically switch between `right` and `left` according to the tooltip

// `closed` determines whether the first point should be appended to the end of the array to close the feature, only used when `levelsDeep` is 0. False by default.

// `combinedErrors` can be an instance of an Error. We need to check

// `container` (border excluded) or to the whole page if not specified.

// `context` if given. When `immediate` is set, `fn` is called immediately if

// `false` can be passed to skip any processing (can be useful to avoid round-off errors).

// `false` otherwise in order to display new tiles _during_ panning, since it is easy to pan outside the

// `fn` will be called no more than one time per given amount of `time`. The arguments

// `fromZoom` to `toZoom`. Used internally to help with zoom animations.

// `leaflet-popup-scrolled` CSS class selector.

// `levelsDeep` specifies the nesting level (0 is for an array of points, 1 for an array of arrays of points, etc., 0 by default).

// `opacity` must be a number from `0` to `1`.

// `range[0]` and `range[1]`. The returned value will be always smaller than

// `range[1]` unless `includeMax` is set to `true`.

// `scale`. In linear algebra terms, multiply the point by the

// `sortFunction(layerA, layerB, nameA, nameB)`.

// `to` values that do not provide a pathname. `to` can simply be a search or

// `top`, `bottom`, `center`, `auto`.

// `true` by default on mobile browsers, in order to avoid too many requests and keep smooth navigation.

// `{setView: true}`.

// a <input>.

// a Promise means "currently loading".

// a best guess of 60 pixels.

// a pixel offset on very high values, see: https://jsfiddle.net/dg6r5hhb/

// a push, so do the same here unless the replace prop is explicitly set

// a specific ring as a LatLng array (that you can earlier access with [`getLatLngs`](#polyline-getlatlngs)).

// a view (center and zoom) and at least one layer, or immediately

// a zoom anim or a pinch gesture

// add event listeners

// add method for calling all hooks

// additional parameters. Has no effect if the layers contained do not

// adjust center for view to get inside bounds

// adjust offset for view to get inside bounds

// again the layer, so prevent the map to reopen it.

// aliases; we should ditch those eventually

// all chunks have JS

// all keys that are not TileLayer options go to WMS params

// all of v1 Formik code). Instead, recall that we are inside of a promise chain already,

// allow arbitrary sub-second precision beyond milliseconds

// allow undefined days and months

// allowing screen readers to ignore the decorative image tiles.

// also can be set through CSS

// also check if it's on polygon stroke

// also check parents for listeners if event propagates

// always return early for non validation errors

// an infinite loop of tiny offsets.

// an instance of [SVGLineElement](https://developer.mozilla.org/docs/Web/API/SVGLineElement).

// an instance of `HTMLElement`.

// ancestor components re-render before descendants

// and `boundingClientRect` as the result of [`getBoundingClientRect()`](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect).

// and `layer.closePopup()`/`.closeTooltip()`.

// and a data object like `{a: 'foo', b: 'bar'}`, returns evaluated string

// and aborts resetting the map view if map.locate was called with

// and makes them disappear or appear in the wrong place (slightly offset) #2602

// and optionally an object literal with `Map options`.

// and optionally scaled by `scale`. Does not have an effect if the

// and optionally sets the map view to the user's location with respect to

// and then bounce back when pinch-zooming.

// and we can use the cached value for the scale.

// and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

// animate pan unless animate: false specified

// animation didn't start, just reset the map view

// animation loop

// animation options.

// any new errors that may come through. We retain the existing error, we do

// application, that will have no effect--the error page continues to display.

// are respected, and that the renderers do exist on the map.

// are when dragging the map around. The default value of `0.0` allows the

// argument of the [cubic bezier curve](https://cubic-bezier.com/#0,0,.5,1),

// arr = qsa(selector, document);

// arrows and `+`/`-` keys.

// as a child of the main map pane if not set.

// as dragging or touch zoom (see `Handler` methods). For example:

// as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring

// attach listener (without syntactic sugar now)

// attribute (or children of such a label), but not children of

// available, otherwise a store update may happen between render and the effect,

// avoid NaN timestamps caused by “undefined” values being passed to Date.UTC

// avoid mem leaks in IE.

// axis wraps around a given range and how. Defaults to `[-180, 180]` in most

// basename which allows the basename to have full control over the presence

// be appended at the end. If `uppercase` is `true`, the parameter names will

// be uppercased (e.g. `'?A=foo&B=bar'`)

// be wrapped in a new `LocationContext.Provider` in order for `useLocation`

// before this.getEvents.

// behavior by simply putting routes with identical paths in the order they

// better performance and smoother look, and less means more accurate representation.

// blue icon images. If you are placing these images in a non-standard

// bottom

// bottom position the overlay in case the height of the overlay changes (images loading etc)

// boundary.  Use the pre-matched (or shimmed) matches

// bounds and the new pixel bounds.

// bracket syntax, we need to check if this is an array so that

// browser doesn't support 3D CSS transforms.

// browsers give this different errors name and messages:

// browsers.

// but takes a bounds parameter like [`fitBounds`](#map-fitbounds).

// buttons where people use callbacks or promises as side effects (which is basically

// by Leaflet to override the behaviour of any click-and-drag interaction on

// by checking error.name.

// by the given scale. Only accepts actual `L.Point` instances, not arrays.

// call all constructor hooks

// call and lock until later

// call it after you've changed the map size dynamically, also animating

// call the constructor

// callback case is for nested validations

// callback is called when the tile has been loaded.

// called too soon, queue to call later

// can access panes with [`map.getPane`](#map-getpane) or

// change cursor

// change target el for shadow root component

// changes if the validation function is synchronous. It's different from

// check for unknown nodes

// check if element really left/entered the event target (for mouseenter/mouseleave)

// check if fn already there

// check in case layer gets added and then removed before the map is ready

// check will fail and we'll handle the `child` part on the next iteration like normal

// chrome/safari: "RangeError", "Maximum call stack size exceeded"

// className: '',

// cleanup of isSubmitting on behalf of the consumer.

// clear all listeners for a type if function isn't specified

// clear all listeners if called without arguments

// clear layers in redraw bounds

// clip polyline by renderer bounds so that we have less to render for performance

// closes the ring for polygons; "x" is VML syntax

// comes in and the user recovers from the error.

// component failed to render, possibly because it was closed or destroyed.

// conditionals in their route config.

// const UNSET = 'unset' as const;

// context to `off` in order to remove the listener.

// control over the presence of a trailing slash on root links

// converts tile cache key to coordinates

// converts tile coordinates to its geographical bounds

// converts tile coordinates to key for the tile cache

// coordinates (sometimes useful in layer and overlay implementations).

// corresponding to the class name passed. For example, using 'line' will return

// create DOM fragment to append tiles in one batch

// create a fake namespace object

// create a queue of coordinates to load tiles from

// create error before stack unwound to get useful stacktrace later

// css base code, injected by the css-loader

// custom handling for DOM elements

// custom handling for React

// data values — they will be evaluated passing `data` as an argument.

// default browser context menu from showing if there are listeners on

// define __esModule on exports

// define getter functions for harmony exports

// defined by `scale`.

// defined by renderer implementations

// defined in child classes

// destroy existing script to make sure only one script loads at a time

// destructive transform (faster)

// destructive, used directly for performance in situations where it's safe to modify existing point

// detail: 1,

// detecting retina displays, adjusting tileSize and zoom levels

// detection accuracy (or to the world view if geolocation failed).

// devices. Enabled by default.

// difference between the new and current centers in pixels

// disabling it counts as first ending the drag.

// dispatch for CommonJS interop named imports.

// distance between two geographical points using spherical law of cosines approximation

// don't animate if disabled, not supported or zoom difference is too large

// don't animate if the zoom origin isn't within one screen from the current center, unless forced

// don't animate on browsers without hardware-accelerated transitions or old Android/Opera

// don't animate too far unless animate: true specified in options

// don't fire movestart if animating inertia

// don't hoist over string (html) components

// don't jump if within 1% of a snap level

// don't load tile if it doesn't intersect the bounds in options

// don't load tile if it's out of bounds and not wrapped

// don't set opacity to 1 if we haven't already set an opacity,

// drag interaction on them.

// dragging the mouse while pressing the shift key.

// draw layers

// drawing a circle with two half-arcs

// due to cross-origin restrictions

// duration in seconds (`0.25` by default) and easing linearity factor (3rd

// e.g. 0.1 would be 10% of map view in each direction

// e.g. pressing `tab` on the keyboard) to ensure the marker is

// each coordinate of `scale`.

// each zoom level and also reducing visual noise. tolerance affects the amount of

// edge: "Error", "Out of stack space"

// effect when the [map CRS](#map-crs) doesn't wrap around. Can be used

// element `el`. You can optionally specify the context of the listener

// empty array, which causes the validation to pass and the form

// empty string instead in this case

// enabled in all browsers that support CSS3 Transitions except Android.

// enabling "pause on exceptions" in your JavaScript debugger.

// encapsulates the subscription logic for connecting a component to the redux store, as

// end fast-deep-equal

// end react-fast-compare

// errorElement

// errorElement on this route.  Otherwise let it bubble up to an ancestor

// eslint-disable-line

// eslint-disable-line getter-return

// eslint-disable-next-line

// eslint-disable-next-line @typescript-eslint/no-explicit-any

// eslint-disable-next-line @typescript-eslint/no-unused-vars

// eslint-disable-next-line eqeqeq

// eslint-disable-next-line func-names

// eslint-disable-next-line jsx-a11y/anchor-has-content

// eslint-disable-next-line no-console

// eslint-disable-next-line no-constructor-return

// eslint-disable-next-line no-empty

// eslint-disable-next-line no-param-reassign

// eslint-disable-next-line no-underscore-dangle, no-param-reassign

// eslint-disable-next-line prefer-destructuring

// event took place.

// event with location data on success or a [`locationerror`](#map-locationerror) event on failure,

// except OSX (Mac) -> 3x, Chrome running on Linux 1x

// exclude the old data-react-paypal-script-id value from the hash generated by getScriptID()

// experimental, not the part of public api

// expose the modules object (__webpack_modules__)

// factor of `scale`.

// factory L.marker(latlng: LatLng, options? : Marker options)

// factory L.transformation(a: Number, b: Number, c: Number, d: Number)

// factory new L.Transformation(a: Number, b: Number, c: Number, d: Number)

// fallback for IE 7-8

// fast-deep-equal index.js 2.0.1

// faster (and vice versa).

// filters collection throws an error if we try to retrieve a filter that doesn't exist

// find fn and remove it

// find the source for a warning that appears in the console by

// firefox: "InternalError", too much recursion"

// first. This allows people to have fine-grained control over the matching

// focusable elements from displaying an outline when the user performs a

// following a link in the href of the a element, or doing a POST request

// for `dragstart` DOM events, usually generated when the user drags an image.

// for a second (also called long press).

// for debug purposes

// for each edge (left, bottom, right, top)

// for it to be considered a valid click (as opposed to a mouse drag).

// for it to be considered a valid tap.

// for more details.

// for the first time).

// for this new option we follow the documented behavior

// force the browser to consider the newly added element for transition

// from `maxNativeZoom` level and auto-scaled.

// from `minNativeZoom` level and auto-scaled.

// from the map's, let _setView reset levels and prune old tiles.

// full Locations now and avoid the need to run through this flow at all

// function, followed by any arguments passed when invoking the bound function.

// functions if provided as options.

// generators (like Math.random()).

// geographical CRSs. If `undefined`, the longitude axis does not wrap around.

// geographical bounds it is tied to.

// geographical bounds, bouncing the user back if the user tries to pan

// getDefaultExport function for compatibility with non-harmony modules

// getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.

// go through all other layers of the same pane, set zIndex to max + 1 (front) or min - 1 (back)

// group.eachLayer(function (layer) {

// hack for https://github.com/Leaflet/Leaflet/issues/1980

// handleChange with React Native and React Native Web's onChangeText prop which

// handlers start running).

// happens after starting zoom animation (propagating to the map pane), we know that it ended globally

// hash string, in which case we should assume that the navigation is relative

// hit detection for polylines

// https://bugzilla.mozilla.org/show_bug.cgi?id=1203873 but Webkit also have

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Getter_only

// https://github.com/Leaflet/Leaflet/issues/2771

// https://www.w3.org/TR/html-aria/#el-img-empty-alt

// https://www.w3.org/WAI/tutorials/images/decorative/

// iOS needs an "action" attribute for nice input: https://stackoverflow.com/a/39485162/406725

// iPadOs 13 fix

// iconAnchor: (Point),

// if (combined.spec.nullable === UNSET)

// if (combined.spec.presence === UNSET)

// if a is inside the clip window

// if a,b is inside the clip window (trivial accept)

// if a,b is outside the clip window (trivial reject)

// if b is outside the clip window (a->b goes out of screen)

// if createTile is defined with a second argument ("done" callback),

// if it was passed directly.

// if it's already initialized, optionally passing a function context.

// if it's the first batch of tiles to load

// if map exists and event is not a keyboard event

// if necessary

// if out of minzoom/maxzoom

// if segment goes out of screen, or it's the last one, it's the end of the line part

// if the nested value is a schema we can skip cloning, since

// if there is no default set invent one

// if we should toggle it open/closed

// if we're leaving the layer, fire mouseout

// if we're not reusing the icon, remove the old one and init new one

// ignore errors when closing the component

// ignore errors when disabling the component

// ignore errors when enabling the component

// image already loaded...

// implement `methodName`.

// import a list of modules into the list

// in Safari 9 which returns 'object' for typed arrays and other constructors.

// in a DataStaticRouter

// in all browsers that support CSS3 Transitions except Android.

// in case of SVG element

// in case of removing the renderer itself from the map.

// in combination with [`bounds`](#gridlayer-bounds) to prevent requesting

// in modern browsers `type` cannot be just overridden:

// in px

// in these cases the current part is the next schema and should be processed

// in this iteration. For cases where the index signature is included this

// in which they were added to the control.

// including computed values or values set through CSS.

// including pan and fly animations.

// including zoom and fly animations.

// increase clip padding by stroke width to avoid stroke on clip edges

// index routes, so don't add them to the list of possible branches.

// inherit parent's statics

// init swiper

// inner fields are always strict:

// innerOptions.value = value[prop];

// inside a popup if its content exceeds it.

// inspired by https://paulirish.com/2011/requestanimationframe-for-smart-animating/

// install a JSONP callback for chunk loading

// instead of using params["*"] later because it will be decoded then

// instead returns the minimum zoom level on which the map view fits into

// interaction behavior in runtime, enabling or disabling certain features such

// intersect if they have at least one point in common.

// into "M..L..L.." instructions

// is between the current index and the one after it.

// is between the current index and the one before it.

// is created synchronously, otherwise a store update may occur before the

// is specified, it must be called when the tile has finished loading and drawing.

// isDirection

// istanbul ignore if

// istanbul ignore next

// it isn't needed and breaks transparent pngs.

// it returns false. Useful for vendor-prefixed styles like `transform`.

// it will zoom to the center of the view regardless of where the mouse was.

// it's a hot path since Layer uses the on(obj) syntax

// its center is within the CRS's bounds.

// its shape and returns a new array of simplified points, using the

// keep as is for the time being and just let any incoming keys take precedence

// keys multiple times.

// layer point of the current center

// lazy load so that environments that need to polyfill have a chance to do so

// left

// left and top  values are in page scale (like the event clientX/Y)

// left, top

// level and everything is scaled by a factor of `scale`. Inverse of

// like markers and vector layers are still visible.

// loadScript function to load a script via script tag

// loop

// major reason we call this a "to" value instead of a "href".

// make sure maxZoom is gte minZoom

// make sure minZoom is lte maxZoom

// make the container focusable by tabbing

// makes it possible to click through svg root; we'll reset it back in individual paths

// makes this work on IE touch devices by stopping it from firing a mouseout event when the touch is released

// manually add the new tests to ensure

// manually merge the blacklist/whitelist (the other `schema` takes

// map CRS. Don't change this if you're not sure what it means.

// map container where the event took place.

// map edge to start panning the map.

// map initialization methods

// map the delta with a sigmoid function to -4..4 range leaning on -1..1

// map's CRS's `wrapLat` and `wrapLng` properties, if they are outside the

// map.doubleClickZoom.disable();

// mark tile as ready, but delay one frame for opacity animation to happen

// match only if we find the end of this path segment.  Look for an optional

// maximum zoom level possible.

// mean a change of one full zoom level. Smaller values will make wheel-zooming

// means the zoom level will not be snapped after `fitBounds` or a pinch-zoom.

// merge options

// methods below are called by vector layers implementations

// migration guide from v5 as a means of disambiguation between `to` values

// mix given properties into the prototype

// mix includes into the prototype

// mix static properties into the class

// mixin to redefine some SVG methods to handle VML syntax which is similar but with some differences

// mobile devices (by setting image `src` to this string).

// mode & 16: return value when it's Promise-like

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// modern browsers ([Chrome 50 and newer](https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-powerful-features-on-insecure-origins))

// modules

// more closely by only setting the property when string

// mount swiper

// movement: update container viewBox so that we don't have to change coordinates of individual layers

// multiple separate lines (`MultiPolyline`) by passing an array of arrays

// navigate to the raw basename which allows the basename to have full

// necessary event listeners. If a `Function` is passed it will receive

// need to keep track of what pointers and how many are active to provide e.touches emulation

// no HMR

// no HMR manifest

// no baseURI

// no getter for object

// no on chunks loaded

// no prefetching

// no preloaded

// non-captured trailing slash (to match a portion of the URL) or the end

// non-destructive, returns a new point

// object to store loaded and loading chunks

// object — the first argument of the listener function will contain its

// of RenderErrorBoundary

// of a trailing slash on root links

// of geographic points.

// of the element `el` invisible. Used internally by Leaflet to prevent

// of the map's CRS, then scales it according to `zoom` and the CRS's

// of the path (if we've matched to the end).  We used to do this with a

// of the world and seamlessly jumps to the original one so that all overlays

// off of the screen while it is open.

// off overwrites l.fn, so we need to copy fn to a var

// offset is the pixel coords of the zoom origin relative to the current center

// offset of the specified place to the current center in pixels

// offset.left/top values are in page scale (like clientX/Y),

// older versions that do not include `useSyncExternalStore` (React 16.9 - 17.x).

// on map zoom or load). Very useful for creating custom overlays.

// on the map. Defaults to the map's [`closePopupOnClick`](#map-closepopuponclick) option.

// once despite the number of mutations.  Additional

// only add this if geometry or geometries are set and not null

// only render the button when eligible

// only render the mark when eligible

// open the overlay on the map

// open the popup on the map

// open the tooltip on the map

// optionally an options object. You can create a `Polyline` object with

// or 3 numbers (longitude, latitude, altitude) used in GeoJSON for points.

// or `-` on the keyboard, or using the [zoom controls](#control-zoom).

// or `L.Canvas` by default depending on browser support.

// other cases

// otherwise it's delayed. Returns a request ID that can be used to cancel the request.

// outside the view. To set the restriction dynamically, use

// overlap if their intersection is an area.

// overlaps the CRS's bounds.

// overrides the implicit role=link of <a> elements #7399

// padding options to fit the display to more restricted bounds.

// pan by default.

// pan by default. If `options.pan` is `false`, panning will not occur.

// pan-zoom animation.

// passed `'center'`, it will zoom to the center of the view regardless of

// passed to the function. The function should return a `String` or `HTMLElement` to be used in the overlay.

// paypal buttons container is still in the DOM

// paypal marks container is still in the DOM

// paypal messages container is still in the DOM

// pick only targets with listeners

// pixel coordinate relative to the [origin pixel](#map-getpixelorigin).

// pixel coordinates for a particular zoom. For example, it returns

// pixels scrolled (negative if scrolling down).

// points that are on the screen or near, increasing performance.

// polygon centroid algorithm;

// polygons need a different clipping algorithm so we redefine that

// popupAnchor: (Point),

// position on the map.

// precedence in case of conflicts)

// precedence over the map's [default renderer](#map-renderer).

// prepare bound overlay to open: update latlng pos / content source (for FeatureGroup)

// prettier-ignore

// prevSnap = snap;

// prevent link function

// prevent map click

// prevent resize handler call, the view will refresh after animation anyway

// prevent simulated mouse events https://w3c.github.io/touch-events/#mouse-events

// prevents outline when clicking on keyboard-focusable element

// previous

// previous page that didn't have an error. Because this wraps the entire

// private methods for getting map state

// private methods that modify map state

// propagate the event to parents (set with addEventParent)

// properties. The event can optionally be propagated to event parents.

// provides just the value of the input.

// px/s

// px/s^2

// ray casting algorithm for detecting if point is in polygon

// received by the bound function will be any arguments passed when binding the

// recursively convert latlngs input into actual LatLng instances; calculate bounds along the way

// recursively turns latlngs into a set of rings with projected coordinates

// reduce points that are too close to each other to a single point

// reducer returns their initial state. This effectively populates

// ref https://www.w3.org/TR/pointerevents/ https://www.w3.org/Bugs/Public/show_bug.cgi?id=22890

// relative to the [origin pixel](#map-getpixelorigin).

// relative to the map container.

// remember what center/zoom to set after animation

// remove all

// remove last point if it equals first one

// require the crypto API and do not support built-in fallback to lower quality random number

// reset any custom styles

// reset cssMode offsets

// reset lock and call if queued

// reset margins

// resolve them into Formik errors. We can sniff if something is a Yup error

// return closest point on segment or distance to that point

// return the list of modules as css string

// return url for filenames based on template

// returns offset needed for pxBounds to get inside maxBounds at a specified zoom

// returns the corresponding geographical coordinate (for the current zoom level).

// returns the corresponding pixel coordinate relative to the map container.

// returns the index (number) or false

// rewind

// right

// right after a [`fitBounds()`](#map-fitbounds) or a pinch-zoom.

// right, bottom

// root path: ''

// route context. This is explained in `Note on `<Link to>` values` in our

// route tree depth-first and child routes appear before their parents in

// safe to mutate since this is fired in sequence

// save 2nd code to avoid calculating it on the next segment

// save tile in cache

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25

// see https://rosettacode.org/wiki/Haversine_formula

// separate function to use in tests

// set canvas size (also clearing it); use double size on retina

// set initialized flag

// set overlay source to this layer

// set size of svg-container if changed

// set the removed listener to noop so that's not called if remove happens in fire

// setup Promise in chunk cache

// should propagate to (if not stopped).

// simplification (lesser value means higher quality but slower and with more points).

// simplify each clipped part of the polyline for performance

// since there can be negative offsets.

// single entry

// slow down map dragging outside bounds, and `1.0` makes the bounds fully

// so it's safe to cache the position for performance

// so that when we are in an error state, it gets reset when a new location

// so they are not called if remove happens in fire

// so they sort equally.

// so this gets call 3 times

// so we don't want to break the promise chain

// so we emulate that by calculating what's under the mouse on mousemove/click manually

// so we handle like we would a normal HTML change event.

// solid, preventing the user from dragging outside the bounds.

// some other error. we should definitely know about these

// something got wrong

// sometimes the array index part of a path doesn't exist: "nested.arr.child"

// sort tile queue to load tiles in order of their distance to center

// space-separated types (e.g. `'click dblclick'`).

// specify a basename with a trailing slash, we should support it

// square distance (to avoid unnecessary Math.sqrt calls)

// src/configureStore.ts

// src/createAction.ts

// src/createReducer.ts

// src/createSlice.ts

// src/entities/entity_state.ts

// src/getDefaultMiddleware.ts

// src/immutableStateInvariantMiddleware.ts

// src/index.ts

// src/isPlainObject.ts

// src/listenerMiddleware/utils.ts

// src/mapBuilders.ts

// src/utils.ts

// ssr

// stage 1: vertex reduction

// stage 2: Douglas-Peucker simplification

// start chunk loading

// start react-fast-compare

// start with the current tests

// state defaults to `null` because `window.history.state` does

// stationary (e.g. used internally for scroll zoom and double-click zoom).

// still see it as "moved".

// stop panning and fly animations if any

// stops loading all tiles in the background layer

// styled according to the options.

// subscription callback always has the selector from the latest render commit

// subscription is created and an inconsistent state may be observed

// sure what it means.

// tags it will allow on a page

// that and abort the submit.

// that begin with `/` and those that do not. However, this is problematic for

// that do not produce a character value.

// that is a valid style name for an element. If no such name is found,

// that it doesn't happen often even if the method is called many

// that its center is within the CRS's bounds.

// that will be used for sorting the layers, when `sortLayers` is `true`.

// the "flattened" version.

// the CRS origin.

// the ESC key for closing of the popup.

// the International Union of Geodesy and Geophysics,

// the [origin pixel](#map-getpixelorigin) where the event took place.

// the `keydown` event is fired for keys that produce a character value and for keys

// the browser doesn't have native support for

// the corresponding geographical coordinate (for the current zoom level).

// the deduping logic is consistent

// the enforcement of trailing slashes throughout the app

// the given bounds in its entirety.

// the highest of their `maxZoom` options will be used instead.

// the initial state tree.

// the layer as the first argument and should return a `String` or `HTMLElement`.

// the location changing.

// the lowest of their `minZoom` options will be used instead.

// the map builds momentum while dragging and continues moving in

// the map layer (useful in custom layer and overlay implementations).

// the map pane? "left point of the map layer" can be confusing, specially

// the map will not be panned.

// the map's CRS. By default this measures distance in meters.

// the map. Affects drag interactions on the whole document.

// the new state tree with any relevant data from the old one.

// the noRedraw parameter is set to false.

// the panes as values.

// the polyline in case of a multi-polyline, but can be overridden by passing

// the popup closing when another popup is opened.

// the root / URL.

// the same direction for some time. Feels especially nice on touch

// the same for the transitionend event, in particular the Android 4.1 stock browser

// the tiles on all zoom levels higher than `maxNativeZoom` will be loaded

// the tiles on all zoom levels lower than `minNativeZoom` will be loaded

// the wrong place after doing a large `panBy`.

// then returns it. The pane is created as a child of `container`, or

// then we have _some_ form of path in our regex so we should expect to

// they are already immutable

// they will disappear for the length of the animation. By default it's

// this CRS (e.g. meters for EPSG:3857, for passing it to WMS services).

// this because the error provided from the app state may be cleared without

// this event. Also fired on mobile when the user holds a single touch

// this flag is needed for handling `strict` correctly in the context of

// this is a convenience for when users only supply a single pair

// this keeps inheritance when obj is a class

// this method is only used for elements previously positioned using setPosition,

// this will output  { friends: [true] } and not { friends: { "0": true } }

// this._validating = true;

// throws error in IE6-8

// throws error when not yet added to map as this center calculation requires projected coordinates

// thus triggering an infinite loop in flyTo

// tiles outside the CRS limits.

// times in a row.

// timestamps without timezone identifiers should be considered local time

// to adding or removing a layer.

// to avoid inconsistent state in some edge cases.

// to be submitted.

// to creating the href.  If this is a root navigation, then just use the raw

// to fit the opened popup.

// to handing off to history.  If this is a root navigation, then we

// to operate correctly into non-standard environments

// to return an `<img>` HTML element with the appropriate image URL given `coords`. The `done`

// to the current location's pathname and *not* the route pathname.

// to trigger a pruning.

// to use the scoped location instead of the global location.

// top

// translate so we use the same path coordinates after canvas element moves

// translates to `'?a=foo&b=bar'`. If `existingUrl` is set, the parameters will

// treat it like a marker and figure out

// triggers are redundant and are very costly

// try...catch because iOS limits us to 100 pushState calls :/

// types can be a map of types/handlers

// types can be a string of space-separated words

// undefined = chunk not loaded, null = chunk preloaded/prefetched

// under some circumstances, see #3666.

// update of the element's position.

// update on virtual update

// update opacity on tiles in IE7-8 because of filter inheritance problems

// update shadow position

// update the overlay (content, layout, etc...)

// update tiles on move, but not more often than once per given interval

// use array properties

// use closestElement for shadow root element to get the actual closest for nested shadow root element

// use loose null check here on purpose

// use special case ;)

// useEffect hook for managing disabled state

// useEffect hook for rendering the buttons

// useLayoutEffect in the browser.

// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store

// used by this overlay.

// used when doing hit detection for Canvas layers

// user can't zoom via wheel more often than once per 40 ms.

// user to drag outside the bounds at normal speed, higher values will

// using CSS translate or top/left positioning depending on the browser

// validation vs just casting. e.g strict() on a field is only used when validating

// value is between -180 and +180 degrees, and the majority of the bounds

// value is between -180 and +180 degrees.

// value is cast, we can check if it meets type requirements

// value should not be changed unless a web browser positions layers in

// verify dependency on window object

// verify the sdk script has successfully loaded

// via setSubmitting(false)

// view after autopanning was performed.

// view in its entirety. If `inside` (optional) is set to `true`, the method

// visible within the map's bounds

// want something to happen on click before any existing click

// want them tried.

// warn on circular references, don't crash

// watch for params change

// way to warn them about it since the page will refresh...

// way, set this option to point to the right path.

// we can update the original argument's value.

// we copy a ref to the callback scoped to the current state/props on each render

// we don't overwrite the input `fn` value, because we need to use it for propagation

// we don't process space-separated events here for performance;

// we know that tile is async and will be ready later; otherwise

// we listen document as any drags that end by moving the touch off the screen get fired there

// webkitTransition comes first because some browser versions that drop vendor prefix don't do

// webpackBootstrap

// well as nesting subscriptions of descendant components, so that we can ensure the

// went successfully.

// what is called when using validateForm.

// when the user drags the mouse through a page with text. Used internally

// where the touch events (fingers) were. Enabled for touch-capable web

// whereas clientLeft/Top (border width) values are the original values (before CSS scale applies).

// which contains the circle radius.

// which may cause missed updates; we also must ensure the store subscription

// will interrupt the interaction and orphan a box element in the container.

// will receive the previous state. This effectively populates

// with page reload when a `<form>` is submitted).

// with standard React renderers (ReactDOM, React Native)

// with the new pixel bounds.

// with whatever "extra arg" they want to inject into their thunks

// withContext<TContext extends AnyObject>(): BaseSchema<

// word boundary but that gives false positives on routes like

// workaround for case when transform is the same and so transitionend event is not fired

// workaround for floating point precision bug when sq = 0, log = -Infinite,

// wrapLat: [min, max],

// wrapLng: [min, max],

// zoom into geographical coordinates.

// zoom level possible.

// zoom transitions run with the same duration for all layers, so if one of transitionend events

// zoomed out by double clicking while holding shift. If passed

// }

// });

//# sourceMappingURL=leaflet-src.js.map

//#endregion

//#region Hooks

//#region Routers

//#region Types and Constants

//-- transforms --

///////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

//should ignore nulls here

//show parent errors after the nested ones: name.first, name
